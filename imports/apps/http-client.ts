import type { Entity } from "/imports/entities";
export const AppCatalog: Entity[] = [
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","metadata":{"name":"app","title":"HTTP Client","description":"Demonstration of issuing arbitrary HTTP calls","tags":["poc"]},"spec":{"icon":{"type":"glyph","glyph":{"text":"🌐","backgroundColor":"#45b"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"main","title":"HTTP Client","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"intentFilters":[{"action":"app.dist.Main","category":"app.dist.Launcher"}],"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","securityPolicy":{"scriptSrc":["https://unpkg.com"]},"sandboxing":["allow-scripts","allow-forms"],"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"async function sendInternetRequest(request) {\n    const resp = await distApp.fetch('dist-app:/protocolendpoints/http/invoke', {\n        method: 'POST',\n        body: JSON.stringify({\n            input: {\n                ...request,\n                headers: request.headers.filter((x)=>x[0])\n            }\n        })\n    });\n    if (!resp.ok) throw new Error(\"HTTP gateway gave its own \" + resp.status + \" response\");\n    const respData = await resp.json();\n    return {\n        status: respData.status,\n        headers: respData.headers,\n        body: respData.body\n    };\n}\nasync function sendInternalRequest(request) {\n    const resp = await distApp.fetch(request.url.replace(/^internal:/, ''), {\n        method: request.method,\n        headers: new Headers(request.headers.filter((x)=>x[0])),\n        body: request.body\n    });\n    return {\n        status: resp.status,\n        headers: Array.from(resp.headers),\n        body: await resp.text()\n    };\n}\nimport { createApp, reactive, watchEffect } from \"https://unpkg.com/vue@3.2.37/dist/vue.esm-browser.js\";\nconst distApp = await DistApp.connect();\n\"useVueState\";\nconst request = await useVueState('request', {\n    method: 'GET',\n    url: 'https://da.gd/headers',\n    headers: [\n        [\n            'accept',\n            'text/plain, application/json;q=0.9, text/*;q=0.8, */*;q=0.7'\n        ],\n        [\n            'user-agent',\n            'dist-app-poc/0.1 (+https://github.com/danopia/dist-app-poc)'\n        ]\n    ],\n    body: ''\n});\nconst history = await useVueState('history', []);\nconst app = createApp({\n    data: ()=>({\n            request: request(),\n            history: history()\n        }),\n    methods: {\n        sendRequest: async function() {\n            const historyEntry = reactive({\n                request: JSON.parse(JSON.stringify(this.request)),\n                response: null,\n                error: null,\n                pending: true,\n                started: new Date()\n            });\n            if ([\n                'GET',\n                'HEAD',\n                'DELETE'\n            ].includes(historyEntry.request.method)) {\n                historyEntry.request.body = null;\n            }\n            this.history.unshift(historyEntry);\n            try {\n                if (historyEntry.request.url.startsWith('internal:')) {\n                    historyEntry.response = await sendInternalRequest(historyEntry.request);\n                } else {\n                    historyEntry.response = await sendInternetRequest(historyEntry.request);\n                }\n                historyEntry.pending = false;\n            } catch (err) {\n                console.error(err.stack);\n                historyEntry.pending = false;\n                historyEntry.error = {\n                    stack: err.message\n                };\n            }\n        // setTimeout(() => {\n        //   output.style.height = output.scrollHeight+'px';\n        // }, 0);\n        }\n    }\n});\napp.mount('body');\nawait distApp.reportReady();\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<form @submit.prevent=\"sendRequest\">\n  <select name=\"method\" v-model=\"request.method\">\n    <option>GET</option>\n    <option>HEAD</option>\n    <option disabled>POST</option>\n    <option disabled>PUT</option>\n    <option disabled>DELETE</option>\n    <option disabled>OPTIONS</option>\n  </select>\n  <input type=\"text\" name=\"url\" placeholder=\"URL\" required autofocus v-model=\"request.url\">\n  <button type=\"button\" @click=\"request.headers.push(['',''])\">Add header</button>\n  <button type=\"submit\">Fetch</button>\n  <div class=\"header-input-grid\">\n    <template v-for=\"header in request.headers\">\n      <input placeholder=\"Header name\" v-model=\"header[0]\" list=\"request-headers\">\n      <input placeholder=\"Header contents\" v-model=\"header[1]\">\n      <button class=\"square\" type=\"button\" @click=\"request.headers.splice(request.headers.indexOf(header), 1)\">X</button>\n    </template>\n  </div>\n</form>\n\n<!-- TODO: add more from like https://da.gd/headers -->\n<!-- TODO: parameterize using some external config, or make it dynamic/learning -->\n<datalist id=\"request-headers\">\n  <option value=\"accept\">\n  <option value=\"accept-encoding\">\n  <option value=\"accept-charset\">\n  <option value=\"accept-datetime\">\n  <option value=\"accept-encoding\">\n  <option value=\"accept-language\">\n  <option value=\"access-control-request-method\">\n  <option value=\"access-control-request-headers\">\n  <option value=\"authorization\">\n  <option value=\"cache-control\">\n  <option value=\"content-encoding\">\n  <option value=\"content-type\">\n  <option value=\"cookie\">\n  <option value=\"forwarded\">\n  <option value=\"if-match\">\n  <option value=\"if-modified-since\">\n  <option value=\"if-none-match\">\n  <option value=\"if-range\">\n  <option value=\"if-unmodified-since\">\n  <option value=\"origin\">\n  <option value=\"range\">\n  <option value=\"referer\">\n  <option value=\"upgrade-insecure-requests\">\n  <option value=\"user-agent\">\n  <option value=\"via\">\n  <option value=\"x-requested-with\">\n  <option value=\"x-forwarded-for\">\n  <option value=\"x-forwarded-host\">\n  <option value=\"x-forwarded-proto\">\n  <option value=\"x-csrf-token\">\n</datalist>\n\n<div id=\"history-col\">\n  <section class=\"entry\" v-for=\"entry in history\">\n    <progress v-if=\"entry.pending\"></progress>\n    <div v-if=\"entry.request\" class=\"entry-body\">\n      <details class=\"request-details\">\n        <summary>{{ entry.request.method }} {{entry.request.url}} ({{ entry.request.headers.length }} headers)</summary>\n        <table class=\"header-grid\" border=\"1\">\n          <tbody>\n            <tr v-for=\"header in entry.request.headers\">\n              <th>{{ header[0] }}</th>\n              <td>{{ header[1] }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </details>\n    </div>\n    <div v-if=\"entry.response\" class=\"entry-body\">\n      <details class=\"response-details\">\n        <summary>HTTP {{ entry.response.status }} ({{ entry.response.headers.length }} headers)</summary>\n        <table class=\"header-grid\" border=\"1\">\n          <tbody>\n            <tr v-for=\"header in entry.response.headers\">\n              <th>{{ header[0] }}</th>\n              <td>{{ header[1] }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </details>\n    </div>\n    <textarea v-if=\"entry.response\" readonly rows=\"1\" style=\"height: 150px;\">{{ entry.response.body }}</textarea>\n    <textarea v-if=\"entry.error\" readonly=\"\" class=\"error-msg\" rows=\"1\" style=\"height: 150px;\">{{ entry.error.stack }}</textarea>\n  </section>\n  <section class=\"intro\">\n    <ul>\n      <li>this basic tool can issue arbitrary HTTP requests against any URL</li>\n    </ul>\n  </section>\n  <section class=\"footer\">\n    <div>\n      requests will be sent through an arbitrary hosted server\n    </div>\n  </section>\n</div>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  padding: 0 2em 10em;\n  box-sizing: border-box;\n  width: 100%;\n  font-family: monospace;\n}\nform {\n  display: grid;\n  grid-template-columns: min-content minmax(8em,1fr) 8em 8em;\n  grid-template-rows: 3em min-content;\n  grid-gap: 1em;\n  grid-auto-rows: 3em;\n  margin: 1em;\n}\ninput, textarea, select, button {\n  box-sizing: border-box;\n  font-family: inherit;\n  padding: 0.3em 0.5em;\n  border: 1px solid #999;\n}\ninput, textarea, select {\n  background-color: #222;\n  color: #fff;\n  font-size: 1em;\n  /*overflow-y: hidden;*/\n}\ninput[readonly], textarea[readonly] {\n  border-width: 0;\n  background-color: #555;\n  color: #fff;\n}\nbutton {\n  background-color: #444;\n  color: #fff;\n  cursor: pointer;\n}\nbutton:hover, button:focus {\n  border: 1px solid #ccc;\n  background-color: #666;\n}\nbutton.primary {\n  font-size: 1.2em;\n}\nbutton.square {\n  aspect-ratio: 1;\n}\nsection {\n  font-size: 1em;\n  margin: 0.8em;\n  padding: 1em;\n  background-color: rgba(200, 200, 200, 0.3);\n}\n.entry details {\n  margin: 0.3em 0;\n}\n@media (max-width: 800px) {\n  body {\n    padding: 0 0 10em;\n  }\n  section {\n    margin: 0.8em 0;\n  }\n  section.entry {\n    padding-left: 0;\n    padding-right: 0;\n    /* text-align: center; */\n  }\n  .entry-head {\n    padding: 0.5em;\n  }\n  progress {\n    margin-bottom: 1em;\n  }\n}\nh3 {\n  margin: 0.2em 0 0.4em;\n}\nh3:not(:first-child) {\n  padding-top: 1.2em;\n}\na.deeplink {\n  margin-right: 0.4em;\n}\nh4 {\n  display: inline;\n  margin: 0em 0 0.2em;\n}\n.header-input-grid {\n  grid-column: 1 / 5;\n  display: grid;\n  grid-template-columns: minmax(6em,1fr) minmax(8em,2fr) 2.5em;\n  grid-gap: 0.2em;\n}\nsection.entry textarea {\n  width: 100%;\n  resize: vertical;\n  vertical-align: bottom;\n  padding: 0.3em 1em;\n}\n.error-msg {\n  color: #f33 !important;\n}\na {\n  color: #ccc;\n}\nsection.intro {\n  padding: 0.5em 1em;\n}\nsection.intro ul {\n  padding: 0 0.5em;\n  list-style: none;\n}\n.entry-body {\n  margin: 0 1em;\n}\nsection.footer {\n  background-color: rgba(200, 200, 200, 0.15);\n  color: rgba(200, 200, 200, 0.5);\n}\nsection.footer a {\n  color: rgba(200, 200, 200, 0.8);\n}\n\n.entry .header-grid {\n  width: 100%;\n  margin: 0.2em 0 0.5em;\n}\n.header-grid input {\n  width: 100%;\n  box-sizing: border-box;\n}\n.header-grid th {\n  text-align: left;\n}\n.header-grid td {\n  word-break: break-word;\n}\n"}}}},
];
