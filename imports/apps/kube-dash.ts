import type { Entity } from "/imports/entities";
export const AppCatalog: Entity[] = [
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","metadata":{"name":"app","title":"Kube Dash","description":"A playground for Kubernetes interactions","tags":["poc"]},"spec":{"icon":{"type":"glyph","glyph":{"text":"ðŸ§®","backgroundColor":"#aaa"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"main","title":"Counter Demo","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"intentFilters":[{"action":"app.dist.Main","category":"app.dist.Launcher"}],"implementation":{"type":"iframe","sandboxing":["allow-scripts"],"securityPolicy":{"scriptSrc":["https://unpkg.com","https://uber.danopia.net","data:"],"connectSrc":["https://dist-app-backend-kubernetes.devmode.cloud","wss://dist-app-backend-kubernetes.devmode.cloud"]},"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"import { createApp, reactive, watchEffect, ref, computed } from \"vue\";\nimport { autoResult, subscribe } from \"meteor-vue3\";\nconst distApp = await DistApp.connect();\n\"useVueState\";\nconst ddp = DDP.connect('https://dist-app-backend-kubernetes.devmode.cloud/');\nMeteor.subscribe = ddp.subscribe.bind(ddp);\nconst coll = new Mongo.Collection('resources', ddp);\nconst NodeTable = {\n    setup () {\n        const { ready  } = subscribe('/resources/watch', {\n            apiVersion: 'v1',\n            kind: 'Node'\n        });\n        return {\n            ready,\n            nodes: autoResult(()=>coll.find({\n                    kind: 'Node',\n                    apiVersion: 'v1'\n                }))\n        };\n    },\n    template: `\n    <h2>Nodes!</h2>\n    <progress v-if=\"!ready\" indeterminate />\n    <table>\n      <tr v-for=\"node of nodes\">\n        <th>{{node.metadata.name}}</th>\n        <td>{{node.status.nodeInfo.osImage}}</td>\n      </tr>\n    </table>\n  `\n};\nconst LeaseTable = {\n    setup () {\n        const { ready  } = subscribe('/resources/watch', {\n            apiVersion: 'coordination.k8s.io/v1',\n            kind: 'Lease'\n        });\n        return {\n            ready,\n            leases: autoResult(()=>coll.find({\n                    kind: 'Lease',\n                    apiVersion: 'coordination.k8s.io/v1'\n                }))\n        };\n    },\n    template: `\n    <h2>Leases!</h2>\n    <progress v-if=\"!ready\" indeterminate />\n    <table>\n      <tr v-for=\"lease of leases\">\n        <th>{{lease.metadata.name}}</th>\n        <td>{{lease.spec.renewTime}}</td>\n        <td>{{lease.spec.holderIdentity}}</td>\n      </tr>\n    </table>\n  `\n};\nconst BlockDeviceAttrTable = {\n    props: {\n        drives: []\n    },\n    computed: {\n        driveColumns () {\n            const drives = this.drives;\n            let curLeader = null;\n            return drives.map((x)=>{\n                const thisCol = {\n                    uid: x.metadata.uid,\n                    nodeName: x.spec.nodeName,\n                    devicePath: x.spec.devicePath,\n                    nodeColumns: 0\n                };\n                if ((curLeader === null || curLeader === void 0 ? void 0 : curLeader.nodeName) === thisCol.nodeName) {\n                    curLeader.nodeColumns++;\n                } else {\n                    thisCol.nodeColumns = 1;\n                    curLeader = thisCol;\n                }\n                return thisCol;\n            });\n        },\n        nodeColumns () {\n            return this.driveColumns.filter((x)=>x.nodeColumns > 0);\n        },\n        allAttrs () {\n            var _a, _b, _c, _d;\n            const drives = this.drives;\n            const attrs = new Set();\n            for (const rep of drives){\n                for (const attr of (_c = (_b = (_a = rep.status) === null || _a === void 0 ? void 0 : _a.smartReport) === null || _b === void 0 ? void 0 : _b.attributes) !== null && _c !== void 0 ? _c : []){\n                    attrs.add((_d = attr.id) !== null && _d !== void 0 ? _d : -1);\n                }\n            }\n            return Array.from(attrs).sort((a, b)=>a - b).map((attrId)=>{\n                const matches = drives.map((r)=>{\n                    var _a, _b, _c;\n                    return (_c = (_b = (_a = r.status) === null || _a === void 0 ? void 0 : _a.smartReport) === null || _b === void 0 ? void 0 : _b.attributes) === null || _c === void 0 ? void 0 : _c.find((a)=>a.id === attrId);\n                }).map((r)=>r ? Object.assign(Object.assign({}, r), fullValue(r)) : r);\n                return {\n                    attrId: attrId,\n                    info: matches.filter((m)=>m)[0],\n                    reports: matches.map((x)=>x ? Object.assign(Object.assign({}, x), fullValue(x)) : x)\n                };\n            });\n        }\n    },\n    methods: {\n        respace (str) {\n            return str.replace(/_/g, ' ');\n        },\n        healthAttrs (attr) {\n            if (!attr.currentHealth) return;\n            const value = Math.min(attr.currentHealth, 100);\n            const percentage = (value - attr.threshold) / (100 - attr.threshold) * 100;\n            const hsl = `${percentage}, 100%, 60%`;\n            const hsl2 = `${percentage}, 100%, 10%`;\n            return {\n                title: `${attr.currentHealth}% current, ${attr.worstHealth}% worst, ${attr.threshold}% threshold`,\n                class: 'health-cell',\n                style: {\n                    'background-image': `linear-gradient( 180deg,\n          hsla(${hsl2},1),\n          hsla(${hsl2},1) 90%,\n          rgba(0,0,0,0) 90%,\n          rgba(0,0,0,0)\n        ),\n        linear-gradient( 90deg,\n          hsla(${hsl},1),\n          hsla(${hsl},1) ${percentage}%,\n          hsla(${hsl2},1) ${percentage}%,\n          hsla(${hsl2},1)\n        )`.replace(/\\n +/g, ' ')\n                }\n            };\n        }\n    },\n    template: `\n    <table border cellpadding=4 style=\"border-spacing: 1px;\">\n      <tr>\n        <th colspan=2 rowspan=2>S.M.A.R.T. Attribute</th>\n        <th v-for=\"drive of nodeColumns\" :colspan=\"drive.nodeColumns * 2\" :key=\"drive.nodeName\">\n          {{drive.nodeName}}\n        </th>\n        <th rowspan=2>Attribute Type</th>\n      </tr>\n      <tr>\n        <th v-for=\"drive of driveColumns\" colspan=2 :key=\"drive.uid\">\n          {{drive.devicePath}}\n        </th>\n      </tr>\n      <tr v-for=\"attr in allAttrs\" :key=\"attr.attrId\">\n        <td>{{attr.attrId}}</td>\n        <td>{{respace(attr.info.name)}}</td>\n        <template v-for=\"(rep, idx) in attr.reports\" :key=\"idx\">\n          <td v-if=\"rep\" v-bind=\"healthAttrs(rep)\">{{rep.currentHealth}}</td>\n          <td v-if=\"rep\" :title=\"'Raw '+rep.name+': '+rep.rawValue\">{{rep.val}}<div class=\"minmax\" v-if=\"rep.max\"><div class=\"max\">{{rep.max}}</div><div class=\"min\">{{rep.min}}</div></div></td>\n          <td v-if=\"!rep\" colspan=2></td>\n        </template>\n        <td>{{respace(attr.info.type)}}</td>\n      </tr>\n    </table>\n  `\n};\nconst BlockDeviceTable = {\n    setup () {\n        const { ready  } = subscribe('/resources/watch', {\n            apiVersion: 'cloudydeno.github.io/v1',\n            kind: 'BlockDevice'\n        });\n        return {\n            ready,\n            allDrives: autoResult(()=>coll.find({\n                    kind: 'BlockDevice',\n                    apiVersion: 'cloudydeno.github.io/v1'\n                }))\n        };\n    },\n    computed: {\n        spinningDrives () {\n            return this.allDrives.filter((x)=>x.spec.rotationRate !== 'SSD');\n        },\n        solidDrives () {\n            return this.allDrives.filter((x)=>x.spec.rotationRate === 'SSD');\n        }\n    },\n    components: {\n        AttrTable: BlockDeviceAttrTable\n    },\n    template: `\n    <h2>S.M.A.R.T. Drive Monitoring</h2>\n    <progress v-if=\"!ready\" indeterminate />\n    <table border cellpadding=4 style=\"border-spacing: 0;\">\n      <tr>\n        <th colspan=2>Device Location</th>\n        <th>Model</th>\n        <!--th>Serial</th-->\n        <th>Capacity</th>\n        <th colspan=2>Sector sizes</th>\n        <th>RPM</th>\n        <th>Link</th>\n        <th>Form factor</th>\n        <th>S.M.A.R.T.</th>\n      </tr>\n      <tr v-for=\"drive in allDrives\" :key=\"drive.metadata.uid\">\n        <td>{{drive.spec.nodeName}}</td>\n        <td>{{drive.spec.devicePath}}</td>\n        <td>{{drive.spec.deviceModel}}</td>\n        <!--<td>{{drive.spec.serialNumber}}</td>-->\n        <td style=\"text-align: right;\" :title=\"drive.capacityRaw+' bytes'\">\n          {{drive.capacityNumber}}\n          <span :class=\"'capacity-'+drive.capacityUnit\">{{drive.capacityUnit}}</span>\n        </td>\n        <td style=\"text-align: right;\">{{drive.spec.logicalSectorSize}}</td>\n        <td style=\"text-align: right;\">{{drive.spec.physicalSectorSize}}</td>\n        <td style=\"text-align: center;\" v-if=\"drive.spec.rotationRate === 'SSD'\">&mdash;</td>\n        <td v-else>{{drive.spec.rotationRate}}</td>\n        <td>{{drive.status.sataStatus.split(',')[0]}}</td>\n        <td>{{drive.spec.formFactor}}</td>\n        <td>{{drive.status.smartReport.overallAssessment}}</td>\n        <!-- <td>{{drive.status.smartEnabled}}</td> -->\n      </tr>\n    </table>\n\n    <template v-if=\"spinningDrives.length > 0\">\n      <br/>\n      <h2>Spinning Disk Health Attributes</h2>\n      <AttrTable :drives=\"spinningDrives\" />\n    </template>\n\n    <template v-if=\"solidDrives.length > 0\">\n      <br/>\n      <h2>Solid-state Disk Health Attributes</h2>\n      <AttrTable :drives=\"solidDrives\" />\n    </template>\n  `\n};\nfunction fullValue(attr) {\n    var _attr_rawValue, _attr_name;\n    const match = (_attr_rawValue = attr.rawValue) === null || _attr_rawValue === void 0 ? void 0 : _attr_rawValue.match(/(\\d+) \\(Min\\/Max (\\d+)\\/(\\d+)\\)/);\n    if (match) return {\n        val: `${match[1]}Â°C`,\n        min: `${match[2]}Â°`,\n        max: `${match[3]}Â°`\n    };\n    if ((_attr_name = attr.name) === null || _attr_name === void 0 ? void 0 : _attr_name.endsWith('_Hours')) {\n        var _attr_rawValue1;\n        const hours = parseInt((_attr_rawValue1 = attr.rawValue) !== null && _attr_rawValue1 !== void 0 ? _attr_rawValue1 : '0');\n        if (hours > 24) return {\n            val: `${Math.round(hours / 24)} days`\n        };\n        return {\n            val: `${hours} hours`\n        };\n    }\n    var _attr_rawValue2;\n    const num = parseInt((_attr_rawValue2 = attr.rawValue) !== null && _attr_rawValue2 !== void 0 ? _attr_rawValue2 : '0');\n    if (num > 2.5 * 1000000000) return {\n        val: Math.round(num / 1000000000 * 10) / 10 + ' bn'\n    };\n    if (num > 2.5 * 1000000) return {\n        val: Math.round(num / 1000000 * 10) / 10 + ' m'\n    };\n    if (num > 2.5 * 1000) return {\n        val: Math.round(num / 1000 * 10) / 10 + ' k'\n    };\n    return {\n        val: `${num}`\n    };\n}\nconst app = createApp({\n    data: await useVueState('root', {\n        currentFrame: 'home'\n    }),\n    methods: {}\n});\napp.component('NodeTable', NodeTable);\napp.component('LeaseTable', LeaseTable);\napp.component('BlockDeviceTable', BlockDeviceTable);\napp.mount('#app');\nawait distApp.reportReady();\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<div id=\"app\">\n  <node-table v-if=\"currentFrame == 'home'\"></node-table>\n  <block-device-table v-if=\"currentFrame == 'block-devices'\"></block-device-table>\n</div>\n","inlineStyle":"body { background: #000; color: #eee; }\n.health-cell {\n  padding: 0.2em 0.5em 0.3em;\n  text-align: center;\n  border: 0;\n}\n.minmax {\n  display: inline-block;\n  font-size: 0.7em;\n  padding-left: 1em;\n  margin: -4px 0;\n  line-height: 1;\n  vertical-align: middle;\n  .max { color: #ffab91; }\n  .min { color: #90caf9; }\n}\n","importMap":{"imports":{"vue":"https://unpkg.com/vue@3.2.37/dist/vue.esm-browser.js","meteor-vue3":"https://uber.danopia.net/dist-app-poc/meteor-vue3.js?b"}},"scriptUrls":["https://uber.danopia.net/dist-app-poc/meteor-client-bundle.js?ad"]}}}},
];
