import type { Entity } from "/imports/entities";
export const AppCatalog: Entity[] = [
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","metadata":{"name":"app","title":"Developer Toolbelt","description":"Demonstration of inline utility Javascript apps","tags":["poc"]},"spec":{"icon":{"type":"glyph","glyph":{"text":"👨‍💻","backgroundColor":"#363"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"launcher","title":"Developer Toolbelt","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"intentFilters":[{"action":"app.dist.Main","category":"app.dist.Launcher"}],"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts"],"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const distApp = await DistApp.connect();\n// TODO: use distApp instance to fetch the available activities\n// TODO: categorize activities by encoding, networking, calculating (codec)\n// const toolListP = fetch('/~~export', {\n//   method: 'POST',\n//   body: JSON.stringify({\n//     Op: 'enumerate',\n//     Path: '/public/web/toolbelt',\n//     Depth: 1,\n//   }),\n// })\n//   .then(x => x.json())\n//   .then(x => x.Output.Children)\n//   .then(x => x\n//         .filter(x => x.Type === 'File')\n//         .filter(x => x.Name !== 'index.html')\n//         .filter(x => x.Name !== 'prettyjson.html')\n//         .map(x => x.Name));\nconst list = await Promise.resolve([\n    'aws-ips.html',\n    'base64.html',\n    // 'binary.html',\n    // 'calculator.html',\n    // 'dagd.html',\n    'google-dns.html',\n    // 'irc-colors.html',\n    'jwt.html',\n    'pretty-json.html',\n    // 'regex-tester.html',\n    'timestamp.html',\n    'urlencode.html'\n]);\nconst toolList = document.getElementById('tool-list');\nlist.forEach((file)=>{\n    const baseName = file.split('.').slice(0, -1).join('.');\n    const li = document.createElement('li');\n    const a = document.createElement('a');\n    const span = document.createElement('span');\n    li.appendChild(a);\n    a.appendChild(span);\n    a.setAttribute('href', baseName);\n    span.innerText = baseName.replace(/-/g, ' ');\n    toolList.appendChild(li);\n});\ntoolList.addEventListener('click', (evt)=>{\n    evt.preventDefault();\n    const href = evt.target.closest('a').getAttribute('href');\n    distApp.launchIntent({\n        receiverRef: 'Activity/' + href\n    });\n});\nawait distApp.reportReady();\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<ul id=\"tool-list\"></ul>\n","inlineStyle":"html {\n  height: 100%;\n}\nbody {\n  display: grid;\n  grid-template-rows: 5em 1fr;\n  box-sizing: border-box;\n  height: 100%;\n  margin: 0;\n  padding: 0.5em;\n\n  background-color: #333;\n  color: #fff;\n  font-family: monospace;\n}\n#tool-list {\n  list-style: none;\n  padding: 0;\n  margin: 1em;\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: repeat(auto-fit, max(1fr, 10em));\n  justify-content: space-around;\n  gap: 3em;\n  max-width: 1200px;\n}\n@media (min-width: 1200px) {\n  body {\n    font-size: 1.15em;\n  }\n}\n@media (max-width: 900px) {\n  #tool-list {\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 2em;\n  }\n}\n@media (max-width: 600px) {\n  #tool-list {\n    grid-template-columns: 1fr 1fr;\n    gap: 1.5em;\n  }\n  body {\n    font-size: 0.9em;\n  }\n}\n@media (max-width: 400px) {\n  #tool-list {\n    grid-template-columns: 1fr;\n  }\n}\n#tool-list li {\n  display: grid;\n}\n#tool-list a {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 1em;\n  box-sizing: border-box;\n\n  font-size: 1.6em;\n  background-color: rgba(200, 200, 200, 0.5);\n  color: #fff;\n\n  transition: background-color 0.2s linear;\n}\n#tool-list a:not(:hover) {\n  text-decoration: none;\n  background-color: rgba(200, 200, 200, 0.3);\n}\n"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"aws-ips","title":"AWS Region Resolver","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts","allow-forms","allow-modals"],"securityPolicy":{"connectSrc":["https://ip-ranges.amazonaws.com","https://raw.githubusercontent.com","https://da.gd"]},"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const distApp = await DistApp.connect();\n\"useVueState\";\nconst historyCol = document.querySelector('#history-col');\nfunction addEntry() {\n    const title = document.createElement('h4');\n    const progress = document.createElement('progress');\n    const output = document.createElement('textarea');\n    output.readOnly = true;\n    output.rows = 1;\n    const time = document.createElement('time');\n    const headbox = document.createElement('div');\n    headbox.classList.add('entry-head');\n    headbox.appendChild(title);\n    const box = document.createElement('section');\n    box.classList.add('entry');\n    box.appendChild(headbox);\n    box.appendChild(progress);\n    historyCol.insertBefore(box, historyCol.children[0]);\n    const finalizeBox = ()=>{\n        box.removeChild(progress);\n        box.appendChild(output);\n        box.appendChild(time);\n        setTimeout(()=>{\n            output.style.height = output.scrollHeight + 'px';\n        }, 0);\n    };\n    return {\n        deeplink (path) {\n            const deeplink = document.createElement('a');\n            deeplink.href = '#' + encodeURI(path);\n            deeplink.innerText = '#';\n            deeplink.classList.add('deeplink');\n            headbox.insertBefore(deeplink, title);\n        },\n        title (text) {\n            title.innerText = text;\n        },\n        promise (p) {\n            return p.then((text)=>{\n                output.value = text.trim();\n                finalizeBox();\n            }, (err)=>{\n                output.classList.add('error-msg');\n                output.value = err.message || JSON.stringify(err, null, 2);\n                finalizeBox();\n            });\n        }\n    };\n}\n;\nfunction FirstThenPlusN(list, firstN) {\n    if (list.length <= firstN) return list.join(', ');\n    return `${list.slice(0, firstN).join(', ')} (+ ${list.length - firstN})`;\n}\nfunction ParseInput(rawInput) {\n    const v4Match = rawInput.match(/((?:\\d{1,3}\\.){3}\\d{1,3})(\\/|:|$)/);\n    const dnsMatch = rawInput.match(/([a-z0-9.-]+\\.[a-z][a-z0-9-]+)(\\/|:|$)/i);\n    if (v4Match) {\n        return {\n            text: v4Match[1].toLowerCase(),\n            type: 'ipv4'\n        };\n    } else if (dnsMatch) {\n        return {\n            text: dnsMatch[1].toLowerCase(),\n            type: 'dns'\n        };\n    } else {\n        throw new Error(`Couldn't parse input: ${rawInput}`);\n    }\n}\nfunction IPv4ToInt(ip) {\n    return ip.split('.').reduce((int, oct)=>(int << 8) + parseInt(oct, 10), 0) >>> 0;\n}\nclass PrefixManager {\n    v4Matches(ip) {\n        const ipAsInt = IPv4ToInt(ip);\n        const matches = this.v4Prefixes.filter((alloc)=>{\n            const [range, bits = 32] = alloc.ip_prefix.split('/');\n            const mask = ~(2 ** (32 - bits) - 1);\n            return (ipAsInt & mask) === (IPv4ToInt(range) & mask);\n        });\n        return matches;\n    }\n    constructor(data, source){\n        this.prefixSource = source;\n        this.syncToken = data.syncToken;\n        if (source === 'aws') {\n            const [Y, M, D, h, m, s] = data.createDate.split('-');\n            this.createDate = Date.parse(`${Y}-${M}-${D}T${h}:${m}:${s}Z`);\n            this.v4Prefixes = data.prefixes;\n            this.v6Prefixes = data.ipv6_prefixes;\n        } else if (source === 'gcloud') {\n            this.createDate = Date.parse(data.creationTime);\n            this.v4Prefixes = data.prefixes.filter((x)=>'ipv4Prefix' in x).map((x)=>({\n                    ip_prefix: x.ipv4Prefix,\n                    region: x.scope,\n                    service: x.service\n                }));\n            this.v6Prefixes = data.prefixes.filter((x)=>'ipv6Prefix' in x).map((x)=>({\n                    ip_prefix: x.ipv6Prefix,\n                    region: x.scope,\n                    service: x.service\n                }));\n        }\n    }\n}\nconst awsPromise = async function() {\n    const resp = await fetch('https://ip-ranges.amazonaws.com/ip-ranges.json');\n    const json = await resp.json();\n    return new PrefixManager(json, 'aws');\n}();\nconst gcloudPromise = async function() {\n    // CORS...\n    // const resp = await fetch('https://www.gstatic.com/ipranges/cloud.json')\n    // const resp = await fetch('gcloud.json')\n    const resp = await fetch('https://raw.githubusercontent.com/devmode-cloud/devmode.cloud/master/firebase/public/toolbelt/gcloud.json');\n    const json = await resp.json();\n    return new PrefixManager(json, 'gcloud');\n}();\nconst managersPromise = Promise.all([\n    awsPromise,\n    gcloudPromise\n]);\nconst existingQueries = new Map;\nfunction queryInput(input, andSetHash = false) {\n    if (existingQueries.has(input.text)) return Promise.resolve();\n    const entry = addEntry();\n    entry.title(input.text);\n    entry.deeplink(input.text);\n    existingQueries.set(input.text, entry);\n    if (andSetHash) {\n        setState('input', input.text);\n    }\n    return entry.promise(managersPromise.then(async (managers)=>{\n        let header = '';\n        let primaryAddress;\n        let ranges = new Set;\n        switch(input.type){\n            case 'ipv4':\n                primaryAddress = input.text;\n                for (const manager of managers){\n                    console.log(managers);\n                    manager.v4Matches(input.text).forEach((x)=>ranges.add(x));\n                }\n                break;\n            case 'dns':\n                const dagdResp = await fetch(`https://da.gd/host/${encodeURI(input.text)}`);\n                const dagdText = await dagdResp.text();\n                if (dagdText.match(/[^0-9a-f:., \\n]/i)) throw new Error(dagdText.trim());\n                const addresses = dagdText.trim().split(', ');\n                const v4Addresses = addresses.filter((x)=>x.includes('.'));\n                const v6Addresses = addresses.filter((x)=>x.includes(':'));\n                primaryAddress = v4Addresses[0] || v6Addresses[0];\n                if (v4Addresses.length > 0) header += `IPv4: ${FirstThenPlusN(v4Addresses, 3)}\\n`;\n                if (v6Addresses.length > 0) header += `IPv6: ${FirstThenPlusN(v6Addresses, 1)}\\n`;\n                for (const v4Addr of v4Addresses){\n                    for (const manager1 of managers){\n                        manager1.v4Matches(v4Addr).forEach((x)=>ranges.add(x));\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Input of invalid type: ${input.type}`);\n        }\n        if (ranges.size === 0 && primaryAddress) {\n            const ispResp = await fetch(`https://da.gd/isp/${primaryAddress}`);\n            const ispText = await ispResp.text();\n            header += `Not AWS: ${ispText.trim()}`;\n        }\n        const rangeMap = new Map;\n        for (const range of ranges){\n            const key = [\n                range.ip_prefix,\n                range.region\n            ].join('#');\n            if (!rangeMap.has(key)) rangeMap.set(key, new Array);\n            rangeMap.get(key).push(range);\n        }\n        const rangeMap2 = new Map;\n        for (const ranges1 of rangeMap.values()){\n            const key1 = [\n                ranges1[0].region,\n                ...ranges1.map((x)=>x.service).sort()\n            ].join('#');\n            if (!rangeMap2.has(key1)) rangeMap2.set(key1, new Array);\n            const list = rangeMap2.get(key1);\n            for (const range1 of ranges1){\n                list.push(range1);\n            }\n        }\n        const results = Array.from(rangeMap2.values()).map((matches)=>{\n            const prefixes = Array.from(new Set(matches.map((x)=>x.ip_prefix)));\n            const services = Array.from(new Set(matches.map((x)=>x.service)));\n            return [\n                `Prefix${prefixes.length > 1 ? 'es' : ''}: ${prefixes.join(', ')}`,\n                `Region: ${matches[0].region}`,\n                `Service: ${services.join(' ')}`\n            ].join('\\n');\n        });\n        return header + '\\n' + results.join('\\n\\n');\n    }));\n}\nconst form = document.querySelector('form');\nform.addEventListener('submit', (evt)=>{\n    evt.preventDefault();\n    const { ipaddr  } = evt.target;\n    const rawInput = ipaddr.value;\n    setState('input', rawInput);\n    queryInput(ParseInput(rawInput), true).then(()=>ipaddr.value = '');\n});\nconst inputBox = form.ipaddr;\ninputBox.addEventListener('paste', (evt)=>{\n    try {\n        const pasteData = evt.clipboardData.getData('text');\n        queryInput(ParseInput(pasteData), true).then(()=>inputBox.value = '');\n    } catch (err) {\n        console.log('not acting on paste.', err);\n    }\n});\nglobalThis.go = (str)=>{\n    queryInput(ParseInput(str), true);\n};\ngetState('input').then((rawInput)=>{\n    if (rawInput) {\n        queryInput(ParseInput(rawInput), false);\n    }\n}).finally(()=>distApp.reportReady());\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<form id=\"lookup\">\n  <input type=\"text\" name=\"ipaddr\" placeholder=\"Paste an IP address, hostname, or URL\" required autofocus>\n  <button type=\"submit\">Lookup</button>\n</form>\n\n<div id=\"history-col\">\n  <section class=\"intro\">\n    <ul>\n      <li><strong>example lookups</strong></li>\n      <li><a href=\"#\" onClick=\"go('amazon.com')\">amazon.com</a> (the online store)</li>\n      <li><a href=\"#\" onClick=\"go('console.aws.amazon.com')\">console.aws.amazon.com</a></li>\n      <li><a href=\"#\" onClick=\"go('status.aws.amazon.com')\">status.aws.amazon.com</a></li>\n      <li><a href=\"#\" onClick=\"go('slack.com')\">slack.com</a> (CloudFront)</li>\n      <li><a href=\"#\" onClick=\"go('api.spotify.com')\">api.spotify.com</a> (Google Cloud)</li>\n      <li><a href=\"#\" onClick=\"go('heroku.com')\">heroku.com</a></li>\n      <li><a href=\"#\" onClick=\"go('github.scopely.io')\">github.scopely.io</a> (dual region!)</li>\n      <li><a href=\"#\" onClick=\"go('collector.scopely.io')\">collector.scopely.io</a> (IPv6)</li>\n      <li><a href=\"#\" onClick=\"go('bethesda.net')\">bethesda.net</a> (CloudFront)</li>\n      <li><a href=\"#\" onClick=\"go('cloudycluster.com')\">cloudycluster.com</a> (S3)</li>\n      <li><a href=\"#\" onClick=\"go('cloudping.co')\">cloudping.co</a></li>\n      <li><a href=\"#\" onClick=\"go('pepedev.com')\">pepedev.com</a></li>\n      <li><a href=\"#\" onClick=\"go('status.github.com')\">status.github.com</a></li>\n      <li><a href=\"#\" onClick=\"go('en.wikipedia.org')\">en.wikipedia.org</a> (non-AWS)</li>\n      <li><a href=\"#\" onClick=\"go('8.8.8.8')\">Cloudflare DNS</a> (non-AWS)</li>\n    </ul>\n    <ol>\n      <li>Enter an Internet IPv4, hostname, or URL</li>\n      <li>\n        Discover which <strong>AWS Region</strong>\n        and <strong>AWS Service</strong>\n        keeps it running\n      </li>\n      <li>\n        For non-AWS addresses, only the\n        <abbr title=\"The IP address block's WHOIS data is grepped searching for an ISP name. Not a precise art.\">ISP (?)</abbr>\n        is shown\n      </li>\n    </ol>\n  </section>\n  <section class=\"footer\">\n    <div>\n      toolbelt tools by\n      <a target=\"_new\" href=\"https://github.com/danopia\">@danopia</a>\n    </div>\n    <div>\n      <a target=\"dagd\" href=\"https://da.gd/help#host\">DNS</a>\n      and\n      <a target=\"dagd\" href=\"https://da.gd/help#isp\">ISP</a>\n      resolution by\n      <a target=\"dagd\" href=\"https://da.gd\">da.gd</a>\n    </div>\n  </section>\n</div>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  padding: 2em 2em 10em;\n  box-sizing: border-box;\n  width: 100%;\n  max-width: 60em;\n  font-family: monospace;\n}\nform {\n  display: grid;\n  grid-template-columns: 1fr 8em;\n  grid-gap: 1em;\n  grid-auto-rows: 3em;\n  margin: 1em;\n}\ninput, textarea {\n  box-sizing: border-box;\n  background-color: #222;\n  color: #fff;\n  font-size: 1em;\n  padding: 0.3em 0.5em;\n  border: 1px solid #999;\n  overflow-y: hidden;\n}\ninput[readonly], textarea[readonly] {\n  border-width: 0;\n  background-color: #555;\n  font-family: inherit;\n  color: #fff;\n}\nbutton {\n  font-size: 1.2em;\n  border: 1px solid #999;\n  background-color: #444;\n  font-family: inherit;\n  color: #fff;\n}\nsection {\n  font-size: 1.3em;\n  margin: 0.8em;\n  padding: 1em;\n  background-color: rgba(200, 200, 200, 0.3);\n}\n.entry-head {\n  padding: 0 0 0.3em;\n}\n@media (max-width: 800px) {\n  body {\n    padding: 0 0 10em;\n  }\n  section {\n    margin: 0.8em 0;\n  }\n  section.entry {\n    padding: 0;\n    text-align: center;\n  }\n  .entry-head {\n    padding: 0.5em;\n  }\n  progress {\n    margin-bottom: 1em;\n  }\n}\nh3 {\n  margin: 0.2em 0 0.4em;\n}\nh3:not(:first-child) {\n  padding-top: 1.2em;\n}\na.deeplink {\n  margin-right: 0.4em;\n}\nh4 {\n  display: inline;\n  margin: 0em 0 0.2em;\n}\nsection.entry textarea {\n  width: 100%;\n  resize: vertical;\n  vertical-align: bottom;\n}\n.error-msg {\n  color: #f33 !important;\n}\na {\n  color: #ccc;\n}\nsection.intro {\n  padding: 0.5em 1em;\n}\nsection.intro ul {\n  padding: 0 0.5em;\n  list-style: none;\n}\nsection.footer {\n  background-color: rgba(200, 200, 200, 0.15);\n  color: rgba(200, 200, 200, 0.5);\n}\nsection.footer a {\n  color: rgba(200, 200, 200, 0.8);\n}\n"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"base64","title":"Base64 encode/decode tool","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts","allow-forms","allow-modals"],"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const distApp = await DistApp.connect();\n\"useVueState\";\nfunction rawToBytes(raw) {\n    const bytes = [];\n    for(var i = 0; i < raw.length; i++){\n        bytes.push(raw.codePointAt(i));\n    }\n    return bytes.map((x)=>x.toString(16)).join(' ');\n}\ndocument.querySelector('#decode').addEventListener('submit', (evt)=>{\n    evt.preventDefault();\n    setState('decode-input', evt.target.encoded.value);\n    runDecode(evt.target);\n});\nfunction runDecode(form) {\n    const encoded = form.encoded.value;\n    const decoded = atob(encoded);\n    form.decoded.value = decoded;\n    form.bytes.value = rawToBytes(decoded);\n}\ndocument.querySelector('#encode').addEventListener('submit', (evt)=>{\n    evt.preventDefault();\n    setState('encode-input', evt.target.decoded.value);\n    runEncode(evt.target);\n});\nfunction runEncode(form) {\n    const decoded = form.decoded.value;\n    const encoded = btoa(decoded);\n    form.encoded.value = encoded;\n    form.bytes.value = rawToBytes(decoded);\n}\nconst loads = [\n    getState('decode-input').then((value)=>{\n        if (value) {\n            const form = document.querySelector('form#decode');\n            form.encoded.value = value;\n            runDecode(form);\n        }\n    }),\n    getState('encode-input').then((value)=>{\n        if (value) {\n            const form = document.querySelector('form#encode');\n            form.decoded.value = value;\n            runEncode(form);\n        }\n    }),\n    getState('display-format').then((value)=>{\n        if (value) {\n            outputFormatSelect.value = value;\n        }\n    })\n];\nPromise.all(loads).finally(()=>distApp.reportReady());\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<form id=\"decode\">\n  <textarea class=\"left\" name=\"encoded\" placeholder=\"base64 encoded\"></textarea>\n  <button type=\"submit\">Decode!</button>\n  <textarea class=\"right\" name=\"decoded\" placeholder=\"decoded\"></textarea>\n  <textarea class=\"right\" name=\"bytes\" placeholder=\"hex bytes\"></textarea>\n</form>\n\n<form id=\"encode\">\n  <textarea class=\"left\" name=\"decoded\" placeholder=\"plain text\"></textarea>\n  <button type=\"submit\">Encode!</button>\n  <textarea class=\"right\" name=\"encoded\" placeholder=\"encoded\"></textarea>\n  <textarea class=\"right\" name=\"bytes\" placeholder=\"hex bytes\"></textarea>\n</form>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding: 2em;\n  box-sizing: border-box;\n  min-width: 40em;\n  font-family: monospace;\n}\nform {\n  display: grid;\n  grid-template-columns: 1fr 8em 1fr;\n  grid-gap: 1em;\n  grid-auto-rows: minmax(3em, auto);\n\n  margin: 1em;\n  flex: 1;\n}\ntextarea {\n  background-color: #111;\n  color: #fff;\n  padding: 0.2em 0.5em;\n}\ntextarea.left {\n  grid-column: 1;\n  grid-row: span 2;\n}\ntextarea.right {\n  grid-column: 3;\n}\nbutton {\n  grid-column: 2;\n  grid-row: span 2;\n  background-color: #555;\n  font-family: inherit;\n  color: #fff;\n}\n"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"jwt","title":"JWT inspector tool","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts","allow-forms","allow-modals"],"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const distApp = await DistApp.connect();\n\"useVueState\";\nconst jwtBox = document.querySelector('[name=token]');\nconst form = document.querySelector('form');\nfunction decodeJWT(jwt) {\n    const parts = jwt.split('.');\n    if (parts.length != 3) {\n        alert('thats no jwt!');\n        return;\n    }\n    const header = JSON.parse(atob(parts[0]));\n    const body = JSON.parse(atob(parts[1]));\n    console.log(header, body);\n    //evt.target.decoded.value = decoded;\n    document.querySelector('[name=header]').value = JSON.stringify(header, null, 2);\n    document.querySelector('[name=body]').value = JSON.stringify(body, null, 2);\n}\nform.addEventListener('submit', (evt)=>{\n    evt.preventDefault();\n    setState('input', stripSignature(jwtBox.value));\n    decodeJWT(jwtBox.value);\n});\njwtBox.focus();\njwtBox.addEventListener('paste', (evt)=>{\n    jwtBox.value = '';\n    const pasteText = evt.clipboardData.getData('text');\n    setState('input', stripSignature(pasteText));\n    decodeJWT(pasteText);\n});\nfunction stripSignature(jwt) {\n    return jwt.split('.').slice(0, 2).concat('[signature_redacted]').join('.');\n}\ngetState('input').then((input)=>{\n    if (input) {\n        jwtBox.value = input;\n        // TODO: should the output box have its own storage?\n        decodeJWT(input);\n    }\n}).finally(()=>distApp.reportReady());\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<form id=\"decode\">\n  <textarea class=\"left\" name=\"token\" placeholder=\"jwt body\"></textarea>\n  <button type=\"submit\">Inspect!</button>\n  <textarea class=\"right\" name=\"header\" placeholder=\"header data\"></textarea>\n  <textarea class=\"right\" name=\"body\" placeholder=\"body data\"></textarea>\n</form>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding: 2em;\n  box-sizing: border-box;\n  min-width: 40em;\n  font-family: monospace;\n}\nform {\n  display: grid;\n  grid-template-columns: 1fr min(20%, 8em) 1fr;\n  grid-gap: 1em;\n  grid-template-rows: min(33%,8em) 1fr;\n\n  margin: 1em;\n  flex: 1;\n}\ntextarea {\n  background-color: #111;\n  color: #fff;\n  padding: 0.2em 0.5em;\n}\ntextarea.left {\n  grid-column: 1;\n  grid-row: span 2;\n}\ntextarea.right {\n  grid-column: 3;\n}\nbutton {\n  grid-column: 2;\n  grid-row: span 2;\n  background-color: #555;\n  font-family: inherit;\n  color: #fff;\n}\n"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"notes","title":"Plain-text notepad","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts","allow-forms","allow-modals"],"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const distApp = await DistApp.connect();\n\"useVueState\";\nconst noteBox = document.querySelector('[name=notes]');\nnoteBox.focus();\ngetState('input').then((input)=>{\n    console.log({\n        getState: input\n    });\n    let lastSeen = input !== null && input !== void 0 ? input : '';\n    if (lastSeen) {\n        noteBox.value = lastSeen;\n    }\n    setInterval(()=>{\n        if (lastSeen === noteBox.value) return;\n        setState('input', noteBox.value);\n        lastSeen = noteBox.value;\n    }, 5000);\n}).finally(()=>distApp.reportReady());\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<form id=\"decode\">\n  <textarea class=\"fill\" name=\"notes\" placeholder=\"notes\"></textarea>\n</form>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding: 0;\n  /* padding: 2em; */\n  box-sizing: border-box;\n  /* min-width: 40em; */\n  font-family: monospace;\n}\nform {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 1em;\n  grid-template-rows: 1fr;\n\n  /* margin: 1em; */\n  flex: 1;\n}\ntextarea {\n  background-color: #111;\n  color: #fff;\n  padding: 0.2em 0.5em;\n}\ntextarea.fill {\n  grid-column: 1;\n  grid-row: 1;\n}\n"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"pretty-json","title":"JSON formatter tool","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts","allow-forms","allow-modals"],"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const distApp = await DistApp.connect();\n\"useVueState\";\nconst inputBox = document.querySelector('[name=input]');\nconst outputBox = document.querySelector('[name=output]');\nconst form = document.querySelector('form');\nfunction prettify(raw) {\n    var input = JSON.parse(raw);\n    // if user pasted JSON-encoded string, try parsing it as an object\n    // useful feature when extracting JSON from a parent JSON document\n    if (input.constructor === String) {\n        // TODO: nicer messaging\n        // alert(\"Automatically parsing contents of JSON string as JSON\");\n        input = JSON.parse(input);\n    }\n    outputBox.value = JSON.stringify(input, null, 2);\n}\nform.addEventListener('submit', (evt)=>{\n    evt.preventDefault();\n    prettify(inputBox.value);\n    setState('input', inputBox.value);\n});\ninputBox.focus();\ninputBox.addEventListener('paste', (evt)=>{\n    inputBox.value = '';\n    const pasteText = evt.clipboardData.getData('text');\n    prettify(pasteText);\n    setState('input', pasteText);\n});\ngetState('input').then((input)=>{\n    if (input) {\n        inputBox.value = input;\n        // TODO: should the output box have its own storage?\n        prettify(input);\n    }\n}).finally(()=>distApp.reportReady());\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<form id=\"decode\">\n  <textarea class=\"left\" name=\"input\" placeholder=\"body\"></textarea>\n  <button type=\"submit\">Format!</button>\n  <textarea class=\"right\" name=\"output\" placeholder=\"data\"></textarea>\n</form>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding: 2em;\n  box-sizing: border-box;\n  min-width: 40em;\n  font-family: monospace;\n}\nform {\n  display: grid;\n  grid-template-columns: 1fr 8em 1fr;\n  grid-gap: 1em;\n  grid-template-rows: 1fr;\n\n  margin: 1em;\n  flex: 1;\n}\ntextarea {\n  background-color: #111;\n  color: #fff;\n  padding: 0.2em 0.5em;\n}\ntextarea.left {\n  grid-column: 1;\n  grid-row: span 2;\n}\ntextarea.right {\n  grid-column: 3;\n  grid-row: span 2;\n}\nbutton {\n  grid-column: 2;\n  grid-row: span 2;\n  background-color: #555;\n  font-family: inherit;\n  color: #fff;\n}\n"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"urlencode","title":"URL encode/decode tool","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts","allow-forms","allow-modals"],"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const distApp = await DistApp.connect();\nfunction rawToBytes(raw) {\n    const bytes = [];\n    for(var i = 0; i < raw.length; i++){\n        bytes.push(raw.codePointAt(i));\n    }\n    return bytes.map((x)=>x.toString(16)).join(' ');\n}\ndocument.querySelector('#decode').addEventListener('submit', (evt)=>{\n    evt.preventDefault();\n    try {\n        const encoded = evt.target.encoded.value;\n        evt.target.decoded.value = decodeURI(encoded);\n        evt.target.bytes.value = decodeURIComponent(encoded);\n    } catch (err) {\n        alert(err);\n    }\n});\ndocument.querySelector('#encode').addEventListener('submit', (evt)=>{\n    try {\n        evt.preventDefault();\n        const decoded = evt.target.decoded.value;\n        evt.target.encoded.value = encodeURI(decoded);\n        evt.target.bytes.value = encodeURIComponent(decoded);\n    } catch (err) {\n        alert(err);\n    }\n});\nawait distApp.reportReady();\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<form id=\"decode\">\n  <textarea class=\"left\" name=\"encoded\" placeholder=\"url encoded\"></textarea>\n  <button type=\"submit\">Decode!</button>\n  <textarea class=\"right\" name=\"decoded\" placeholder=\"decoded\"></textarea>\n  <textarea class=\"right\" name=\"bytes\" placeholder=\"decoded component\"></textarea>\n</form>\n\n<form id=\"encode\">\n  <textarea class=\"left\" name=\"decoded\" placeholder=\"plain text\"></textarea>\n  <button type=\"submit\">Encode!</button>\n  <textarea class=\"right\" name=\"encoded\" placeholder=\"encoded\"></textarea>\n  <textarea class=\"right\" name=\"bytes\" placeholder=\"component-encoded\"></textarea>\n</form>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding: 2em;\n  box-sizing: border-box;\n  min-width: 40em;\n  font-family: monospace;\n}\nform {\n  display: grid;\n  grid-template-columns: 1fr 8em 1fr;\n  grid-gap: 1em;\n  grid-auto-rows: minmax(3em, auto);\n\n  margin: 1em;\n  flex: 1;\n}\ntextarea {\n  background-color: #111;\n  color: #fff;\n  padding: 0.2em 0.5em;\n}\ntextarea.left {\n  grid-column: 1;\n  grid-row: span 2;\n}\ntextarea.right {\n  grid-column: 3;\n}\nbutton {\n  grid-column: 2;\n  grid-row: span 2;\n  background-color: #555;\n  font-family: inherit;\n  color: #fff;\n}\n"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"timestamp","title":"timestamp conversion tool","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts"],"securityPolicy":{"scriptSrc":["https://cdnjs.cloudflare.com"]},"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const distApp = await DistApp.connect();\n\"useVueState\";\nconst currentEpoch = document.querySelector('#current-epoch input');\nlet isCurrentFocused = false;\nconst updateCurrent = ()=>{\n    if (!isCurrentFocused) {\n        currentEpoch.value = Math.round(+new Date() / 1000);\n    }\n};\nsetInterval(updateCurrent, 1000);\nupdateCurrent();\ncurrentEpoch.addEventListener('focus', ()=>{\n    isCurrentFocused = true;\n    currentEpoch.setSelectionRange(0, -1);\n});\ncurrentEpoch.addEventListener('blur', ()=>{\n    isCurrentFocused = false;\n    updateCurrent();\n});\nconst inputEpoch = document.querySelector('#input-epoch-box');\nconst outputFormatSelect = document.querySelector('#output-format-select');\nconst outputTimeLocal = document.querySelector('#epoch-to-time-local');\nconst outputTimeUtc = document.querySelector('#epoch-to-time-utc');\nconst outputTimeTz = document.querySelector('#epoch-to-time-tz');\nconst outputTimeTzOffset = document.querySelector('#epoch-to-time-tz-offset');\nconst outputTzSelect = document.querySelector('#output-tz-select');\nconst epochError = document.querySelector('#epoch-to-time-error');\nconst focusHandler = (evt)=>evt.target.setSelectionRange(0, -1);\ninputEpoch.addEventListener('focus', focusHandler);\noutputTimeLocal.addEventListener('focus', focusHandler);\noutputTimeUtc.addEventListener('focus', focusHandler);\noutputTimeTz.addEventListener('focus', focusHandler);\noutputTimeTzOffset.addEventListener('focus', focusHandler);\nconst parseEpoch = (inputStr)=>{\n    // check for simple integers\n    if (inputStr.match(/^\\d+$/)) {\n        const inputInt = parseInt(inputStr);\n        // go by number of digits\n        switch(inputStr.length){\n            // seconds\n            case 10:\n                return inputInt * 1000;\n            // millis\n            case 13:\n                return inputInt;\n            // micros - JS will trim precision\n            case 16:\n                return inputInt / 1000;\n            // nanos - JS will trim precision\n            case 19:\n                return inputInt / 1000000;\n        }\n        throw new Error(\"Epoch timestamps with \" + inputStr.length + \" digits doesn't make sense\");\n    }\n    if (inputStr.length) {\n        throw new Error(\"Epoch timestamp wasn't an integer, I don't understand\");\n    }\n};\nconst fromEpoch = ()=>{\n    try {\n        epochError.innerText = '';\n        const milliSeconds = parseEpoch(inputEpoch.value.trim());\n        if (milliSeconds) {\n            const format = outputFormatSelect.value;\n            outputTimeLocal.value = moment(milliSeconds).format(format);\n            outputTimeUtc.value = moment(milliSeconds).utc().format(format);\n            const tzMoment = moment(milliSeconds).tz(outputTzSelect.value);\n            outputTimeTz.value = tzMoment.format(format);\n            outputTimeTzOffset.value = tzMoment.utcOffset();\n        } else {\n            outputTimeLocal.value = '';\n            outputTimeUtc.value = '';\n            outputTimeTz.value = '';\n        }\n    } catch (err) {\n        epochError.innerText = err.message;\n    }\n};\ninputEpoch.addEventListener('input', ()=>{\n    setState('input', inputEpoch.value);\n    fromEpoch();\n});\ninputEpoch.addEventListener('paste', (evt)=>{\n    evt.target.value = '';\n});\nmoment.tz.names().forEach((name)=>{\n    const opt = document.createElement('option');\n    opt.text = name;\n    opt.value = name;\n    outputTzSelect.add(opt);\n});\noutputTzSelect.value = moment.tz.guess();\noutputTzSelect.addEventListener('input', ()=>{\n    setState('display-tz', outputTzSelect.value);\n    fromEpoch();\n});\noutputFormatSelect.addEventListener('input', ()=>{\n    setState('display-format', outputFormatSelect.value);\n    fromEpoch();\n});\nconst loads = [\n    getState('input').then((input)=>{\n        if (input) {\n            inputEpoch.value = input;\n        }\n    }),\n    getState('display-tz').then((tz)=>{\n        if (tz) {\n            outputTzSelect.value = tz;\n        }\n    }),\n    getState('display-format').then((value)=>{\n        if (value) {\n            outputFormatSelect.value = value;\n        }\n    })\n];\nPromise.all(loads).finally(()=>{\n    // if the browser didn't restore into the box, let's set a default\n    if (!inputEpoch.value) {\n        inputEpoch.value = Math.round(new Date() / 1000);\n        setState('input', inputEpoch.value);\n    }\n    fromEpoch();\n    distApp.reportReady();\n});\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<section id=\"current-epoch\">\n  <label for=\"current-epoch-box\">The current Epoch timestamp:</label>\n  <input class=\"epoch\" id=\"current-epoch-box\" type=\"text\" readonly />\n  <label>seconds</label>\n</section>\n\n<section id=\"epoch-to-time\">\n  <table class=\"formats\">\n    <tr>\n      <td colspan=\"2\"><input class=\"epoch\" id=\"input-epoch-box\" type=\"text\" placeholder=\"1234567890\" autofocus /></td>\n      <th><label for=\"input-epoch-box\">Input Epoch timestamp</label></th>\n    </tr>\n    <tr>\n      <td>➡</td>\n      <td><select id=\"output-format-select\">\n        <option value=\"LLL\" selected>Friendly date/time</option>\n        <option value=\"l LTS\">Numeric date/time</option>\n        <option value=\"YYYY-MM-DDTHH:mm:ssZ\">ISO-8601</option>\n      </select></td>\n      <th><label for=\"output-format-select\">Output format</label></th>\n    </tr>\n    <tr>\n      <td>↳</td>\n      <td><input id=\"epoch-to-time-local\" type=\"text\" readonly /></td>\n      <th><label for=\"epoch-to-time-local\">Your browser time</label></th>\n    </tr>\n    <tr>\n      <td>↳</td>\n      <td><input id=\"epoch-to-time-utc\" type=\"text\" readonly /></td>\n      <th><label for=\"epoch-to-time-utc\">UTC</label></th>\n    </tr>\n    <tr>\n      <td>↳</td>\n      <td><input id=\"epoch-to-time-tz\" type=\"text\" readonly /></td>\n      <th><select id=\"output-tz-select\"></select></th>\n    </tr>\n    <tr class=\"addtl-info\">\n      <td colspan=\"2\"></td>\n      <td>Effective UTC offset: <input class=\"inline\" id=\"epoch-to-time-tz-offset\" type=\"text\" readonly /> mins</td>\n    </tr>\n  </table>\n  <p id=\"epoch-to-time-error\" class=\"error-msg\"></p>\n</section>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding: 2em;\n  box-sizing: border-box;\n  min-width: 40em;\n}\nbody, input, select {\n  font-family: monospace;\n}\nsection {\n  font-size: 1.3em;\n  margin: 1em;\n  padding: 1em;\n  background-color: rgba(200, 200, 200, 0.3);\n  width: 40em;\n}\ninput {\n  box-sizing: border-box;\n  background-color: #222;\n  color: #fff;\n  font-size: 1em;\n  padding: 0.3em 0.5em;\n  border: 1px solid #999;\n}\ninput[readonly] {\n  border-width: 0;\n  background-color: #555;\n  font-family: inherit;\n  color: #fff;\n}\nselect {\n  background-color: #222;\n  color: #fff;\n  font-size: 1em;\n  border: 1px solid #999;\n  padding: 0.3em 0.5em;\n}\n\ntable {\n  width: 100%;\n}\ntable th {\n  text-align: left;\n  font-weight: normal;\n}\ntable input:not(.inline) {\n  width: 100%;\n}\n.addtl-info td {\n  padding-left: 0.9em;\n}\n\n#current-epoch {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-shrink: 0;\n}\n\ninput.epoch {\n  font-size: 1.3em;\n  text-align: center;\n}\ninput.inline {\n  width: 4em;\n  text-align: center;\n}\n\n#output-format-select {\n  width: 100%;\n}\n\n.error-msg {\n  color: #f33;\n}\n\n@media (min-width: 1000px) {\n  body {\n    font-size: 1.15em;\n  }\n}\n@media (max-width: 600px) {\n  body {\n    font-size: 0.8em;\n    padding: 1em 0.5em;\n  }\n}\n","scriptUrls":["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.14/moment-timezone-with-data.min.js"]}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"ApiBinding","metadata":{"name":"google-dns"},"spec":{"apiName":"google-dns","required":false}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Activity","metadata":{"name":"google-dns","title":"Google DNS Query","ownerReferences":[{"apiVersion":"manifest.dist.app/v1alpha1","kind":"Application","name":"app"}]},"spec":{"icon":{"type":"svg","svg":{"backgroundColor":"#fff","textData":"<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g transform=\"matrix(1, 0, 0, 1, 27.009001, -39.238998)\">\n    <path fill=\"#4285F4\" d=\"M -3.264 51.509 C -3.264 50.719 -3.334 49.969 -3.454 49.239 L -14.754 49.239 L -14.754 53.749 L -8.284 53.749 C -8.574 55.229 -9.424 56.479 -10.684 57.329 L -10.684 60.329 L -6.824 60.329 C -4.564 58.239 -3.264 55.159 -3.264 51.509 Z\"/>\n    <path fill=\"#34A853\" d=\"M -14.754 63.239 C -11.514 63.239 -8.804 62.159 -6.824 60.329 L -10.684 57.329 C -11.764 58.049 -13.134 58.489 -14.754 58.489 C -17.884 58.489 -20.534 56.379 -21.484 53.529 L -25.464 53.529 L -25.464 56.619 C -23.494 60.539 -19.444 63.239 -14.754 63.239 Z\"/>\n    <path fill=\"#FBBC05\" d=\"M -21.484 53.529 C -21.734 52.809 -21.864 52.039 -21.864 51.239 C -21.864 50.439 -21.724 49.669 -21.484 48.949 L -21.484 45.859 L -25.464 45.859 C -26.284 47.479 -26.754 49.299 -26.754 51.239 C -26.754 53.179 -26.284 54.999 -25.464 56.619 L -21.484 53.529 Z\"/>\n    <path fill=\"#EA4335\" d=\"M -14.754 43.989 C -12.984 43.989 -11.404 44.599 -10.154 45.789 L -6.734 42.369 C -8.804 40.429 -11.514 39.239 -14.754 39.239 C -19.444 39.239 -23.494 41.939 -25.464 45.859 L -21.484 48.949 C -20.534 46.099 -17.884 43.989 -14.754 43.989 Z\"/>\n  </g>\n</svg>\n"}},"windowSizing":{"initialWidth":800,"initialHeight":500},"implementation":{"type":"iframe","sandboxing":["allow-scripts","allow-forms","allow-modals"],"source":{"type":"piecemeal","htmlLang":"en","metaCharset":"utf-8","headTitle":"dist.app instance","inlineScript":"const primaryTypes = new Set([\n    'A',\n    'AAAA',\n    'MX',\n    'TXT'\n]);\nconst secondaryTypes = new Set([\n    'NS',\n    'CNAME',\n    'SRV',\n    'PTR',\n    'SSHFP',\n    'CAA'\n]);\nconst rrsetTypes = new Map([\n    [\n        1,\n        'A'\n    ],\n    [\n        2,\n        'NS'\n    ],\n    [\n        5,\n        'CNAME'\n    ],\n    [\n        6,\n        'SOA'\n    ],\n    [\n        12,\n        'PTR'\n    ],\n    [\n        13,\n        'HINFO'\n    ],\n    [\n        15,\n        'MX'\n    ],\n    [\n        16,\n        'TXT'\n    ],\n    [\n        17,\n        'RP'\n    ],\n    [\n        18,\n        'AFSDB'\n    ],\n    [\n        24,\n        'SIG'\n    ],\n    [\n        25,\n        'KEY'\n    ],\n    [\n        28,\n        'AAAA'\n    ],\n    [\n        29,\n        'LOC'\n    ],\n    [\n        33,\n        'SRV'\n    ],\n    [\n        35,\n        'NAPTR'\n    ],\n    [\n        36,\n        'KX'\n    ],\n    [\n        37,\n        'CERT'\n    ],\n    [\n        39,\n        'DNAME'\n    ],\n    [\n        42,\n        'APL'\n    ],\n    [\n        43,\n        'DS'\n    ],\n    [\n        44,\n        'SSHFP'\n    ],\n    [\n        45,\n        'IPSECKEY'\n    ],\n    [\n        46,\n        'RRSIG'\n    ],\n    [\n        47,\n        'NSEC'\n    ],\n    [\n        48,\n        'DNSKEY'\n    ],\n    [\n        49,\n        'DHCID'\n    ],\n    [\n        50,\n        'NSEC3'\n    ],\n    [\n        51,\n        'NSEC3PARAM'\n    ],\n    [\n        52,\n        'TLSA'\n    ],\n    [\n        53,\n        'SMIMEA'\n    ],\n    [\n        55,\n        'HIP'\n    ],\n    [\n        59,\n        'CDS'\n    ],\n    [\n        60,\n        'CDNSKEY'\n    ],\n    [\n        61,\n        'OPENPGPKEY'\n    ],\n    [\n        62,\n        'CSYNC'\n    ],\n    [\n        63,\n        'ZONEMD'\n    ],\n    [\n        64,\n        'SVCB'\n    ],\n    [\n        65,\n        'HTTPS'\n    ],\n    [\n        108,\n        'EUI48'\n    ],\n    [\n        109,\n        'EUI64'\n    ],\n    [\n        249,\n        'TKEY'\n    ],\n    [\n        250,\n        'TSIG'\n    ],\n    [\n        256,\n        'URI'\n    ],\n    [\n        257,\n        'CAA'\n    ],\n    [\n        32768,\n        'TA'\n    ],\n    [\n        32769,\n        'DLV'\n    ]\n]);\nconst select = document.querySelector('select[name=type]');\nconst primaryGroup = document.createElement('optgroup');\nprimaryGroup.label = \"Most Common\";\nconst secondaryGroup = document.createElement('optgroup');\nsecondaryGroup.label = \"Less Common\";\nselect.append(primaryGroup, secondaryGroup);\nfor (const [num, name] of rrsetTypes.entries()){\n    const option = document.createElement('option');\n    option.innerText = name;\n    option.value = num.toString();\n    if (primaryTypes.has(name)) {\n        primaryGroup.appendChild(option);\n    } else if (secondaryTypes.has(name)) {\n        secondaryGroup.appendChild(option);\n    } else {\n        select.appendChild(option);\n    }\n}\nconst distApp = await DistApp.connect();\nconst historyCol = document.querySelector('#history-col');\nfunction addEntry() {\n    const title = document.createElement('h4');\n    const progress = document.createElement('progress');\n    const headbox = document.createElement('div');\n    headbox.classList.add('entry-head');\n    headbox.appendChild(title);\n    const box = document.createElement('section');\n    box.classList.add('entry');\n    box.appendChild(headbox);\n    box.appendChild(progress);\n    historyCol.insertBefore(box, historyCol.children[0]);\n    return {\n        deeplink (path) {\n            const deeplink = document.createElement('a');\n            deeplink.href = '#' + encodeURI(path);\n            deeplink.innerText = '#';\n            deeplink.classList.add('deeplink');\n            headbox.insertBefore(deeplink, title);\n        },\n        title (text) {\n            title.innerText = text;\n        },\n        promise (p) {\n            return p.then((child)=>{\n                box.removeChild(progress);\n                box.appendChild(child);\n            }, (err)=>{\n                const output = document.createElement('textarea');\n                output.readOnly = true;\n                output.rows = 1;\n                output.classList.add('error-msg');\n                output.value = err.message || JSON.stringify(err, null, 2);\n                box.removeChild(progress);\n                box.appendChild(output);\n                setTimeout(()=>{\n                    output.style.height = output.scrollHeight + 'px';\n                }, 0);\n            });\n        }\n    };\n}\n;\nfunction ParseInput(rawInput) {\n    const v4Match = rawInput.match(/((?:\\d{1,3}\\.){3}\\d{1,3})(\\/|:|$)/);\n    if (v4Match) {\n        return {\n            text: v4Match[1].toLowerCase(),\n            nameType: 'ipv4'\n        };\n    } else {\n        return {\n            text: rawInput,\n            nameType: 'dns'\n        };\n    }\n}\nlet apiCap = null;\nasync function newApiCap(apiBindingName) {\n    const newToken = await distApp.mountApiBinding(apiBindingName);\n    if (!newToken) throw new Error(`API not accessible`);\n    return new ApiBindingMount(distApp, apiBindingName, newToken);\n}\nfunction queryInput(input, andSetHash = false) {\n    const entry = addEntry();\n    entry.title(input.type + ' ' + input.text);\n    return entry.promise((async ()=>{\n        // Rejack any IPv4 queries into reverse-IP queries\n        if (input.nameType == 'ipv4') {\n            input = {\n                type: 'PTR',\n                nameType: 'dns',\n                text: input.text.split('.').reverse().join('.') + '.in-addr.arpa.'\n            };\n        }\n        const api = apiCap !== null && apiCap !== void 0 ? apiCap : apiCap = await newApiCap('google-dns');\n        const opts = new URLSearchParams();\n        opts.set('name', input.text);\n        opts.set('type', input.type);\n        opts.set('do', '1');\n        const resp = await api.fetch('/resolve?' + opts.toString());\n        if (!resp.ok) throw new Error(`Received non-ok response: HTTP ${resp.status}`);\n        const json = await resp.json();\n        const wrap = document.createElement('div');\n        wrap.classList.add('result-wrap');\n        for (const tableKey of [\n            \"Question\",\n            \"Answer\",\n            \"Authority\"\n        ]){\n            if (json[tableKey]) {\n                const label = document.createElement('h3');\n                label.innerText = tableKey;\n                wrap.appendChild(label);\n                wrap.appendChild(buildDnsTable(json[tableKey]));\n            }\n        }\n        return wrap;\n    })());\n}\nfunction buildDnsTable(items) {\n    const table = document.createElement('table');\n    table.border = 1;\n    const tr = document.createElement('tr');\n    for (const label of [\n        \"FQDN\",\n        \"Type\",\n        \"TTL\",\n        \"Data\"\n    ]){\n        const th = document.createElement('th');\n        th.innerText = label;\n        th.style.textAlign = label == 'FQDN' || label == 'TTL' ? 'right' : 'left';\n        tr.appendChild(th);\n    }\n    table.appendChild(tr);\n    for (const item of items){\n        const tr1 = document.createElement('tr');\n        if (item.type == 46) continue; // DNSSEC signature\n        for (const field of [\n            \"name\",\n            \"type\",\n            \"TTL\",\n            \"data\"\n        ]){\n            const td = document.createElement('td');\n            if (item[field] != null) {\n                td.innerText = item[field];\n                var _rrsetTypes_get;\n                if (field == 'type') td.innerText = (_rrsetTypes_get = rrsetTypes.get(item[field])) !== null && _rrsetTypes_get !== void 0 ? _rrsetTypes_get : td.innerText;\n                if (field == 'TTL') td.innerText = secondsToTime(item[field]).toString();\n            }\n            td.style.textAlign = field == 'name' || field == 'TTL' ? 'right' : 'left';\n            if (field == 'name' || field == 'data') td.style.minWidth = '10em';\n            tr1.appendChild(td);\n        }\n        table.appendChild(tr1);\n    }\n    return table;\n}\nfunction secondsToTime(secs) {\n    const minutes = Math.floor(secs / 60);\n    if (minutes == 0) return [\n        secs,\n        's'\n    ].join('');\n    const hours = Math.floor(minutes / 60);\n    if (hours == 0) return [\n        minutes,\n        'm',\n        secs - minutes * 60,\n        's'\n    ].join('');\n    return [\n        hours,\n        'h',\n        minutes - hours * 60,\n        'm',\n        secs - minutes * 60,\n        's'\n    ].join('');\n}\nconst form = document.querySelector('form');\nform.addEventListener('submit', (evt)=>{\n    evt.preventDefault();\n    const { name , type  } = evt.target;\n    queryInput({\n        ...ParseInput(name.value),\n        type: type.value\n    });\n});\nconst inputBox = form.name;\ninputBox.addEventListener('paste', (evt)=>{\n    try {\n        const pasteData = evt.clipboardData.getData('text');\n        queryInput({\n            ...ParseInput(pasteData),\n            type: form.type.value\n        });\n    } catch (err) {\n        console.log('not acting on paste.', err);\n    }\n});\nawait distApp.reportReady();\n\n\n//#sourceMappingURL=data:application/json;charset=utf-8;base64,IntcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcInN0ZG91dFwifSI=","bodyHtml":"<form id=\"lookup\">\n  <select name=\"type\">\n  </select>\n  <input type=\"text\" name=\"name\" placeholder=\"Hostname, FQDN, etc\" required autofocus>\n  <button type=\"submit\">Lookup</button>\n</form>\n\n<div id=\"history-col\">\n  <section class=\"footer\">\n    <div>\n      toolbelt tools by\n      <a target=\"_new\" href=\"https://github.com/danopia\">@danopia</a>\n    </div>\n    <div>\n      DNS resolution by\n      <a target=\"_blank\" href=\"https://developers.google.com/speed/public-dns/docs/doh/json\">Google Public DNS</a>\n    </div>\n  </section>\n</div>\n","inlineStyle":"body {\n  background-color: #333;\n  color: #fff;\n  margin: 0;\n  padding: 2em 2em 10em;\n  box-sizing: border-box;\n  width: 100%;\n  max-width: 60em;\n  font-family: monospace;\n}\nform {\n  display: grid;\n  grid-template-columns: 8em 1fr 8em;\n  grid-gap: 1em;\n  grid-auto-rows: 3em;\n  margin: 1em;\n}\nselect, input, textarea {\n  box-sizing: border-box;\n  background-color: #222;\n  color: #fff;\n  font-size: 1em;\n  padding: 0.3em 0.5em;\n  border: 1px solid #999;\n  overflow-y: hidden;\n}\ninput[readonly], textarea[readonly] {\n  border-width: 0;\n  background-color: #555;\n  font-family: inherit;\n  color: #fff;\n}\nbutton {\n  font-size: 1.2em;\n  border: 1px solid #999;\n  background-color: #444;\n  font-family: inherit;\n  color: #fff;\n}\nsection {\n  /*font-size: 1.3em;*/\n  margin: 0.8em;\n  padding: 1em;\n  background-color: rgba(200, 200, 200, 0.3);\n  overflow-x: auto;\n}\n.entry-head {\n  padding: 0 0 0.3em;\n}\n@media (max-width: 800px) {\n  body {\n    padding: 0 0 10em;\n  }\n  section {\n    margin: 0.8em 0;\n  }\n  section.entry {\n    padding: 0;\n    text-align: center;\n  }\n  .entry-head {\n    padding: 0.5em;\n  }\n  progress {\n    margin-bottom: 1em;\n  }\n}\nh3 {\n  margin: 0.2em 0 0.4em;\n}\nh3:not(:first-child) {\n  padding-top: 1.2em;\n}\na.deeplink {\n  margin-right: 0.4em;\n}\nh4 {\n  display: inline;\n  margin: 0em 0 0.2em;\n}\nsection.entry textarea {\n  width: 100%;\n  resize: vertical;\n  vertical-align: bottom;\n}\n.error-msg {\n  color: #f33 !important;\n}\na {\n  color: #ccc;\n}\nsection.intro {\n  padding: 0.5em 1em;\n}\nsection.intro ul {\n  padding: 0 0.5em;\n  list-style: none;\n}\nsection.footer {\n  background-color: rgba(200, 200, 200, 0.15);\n  color: rgba(200, 200, 200, 0.5);\n}\nsection.footer a {\n  color: rgba(200, 200, 200, 0.8);\n}\n\n.result-wrap table {\n  min-width: min(75%,50em);\n  margin: 0 auto;\n}\n.result-wrap th, .result-wrap td {\n  padding: 0.25em 0.5em;\n}\n"}}}},
  {"apiVersion":"manifest.dist.app/v1alpha1","kind":"Api","metadata":{"name":"google-dns","links":[{"url":"https://developers.google.com/speed/public-dns/docs/doh/json","type":"documentation"}]},"spec":{"type":"openapi","crossOriginResourceSharing":"open","definition":"openapi: 3.0.1\ninfo:\n  title: Google Public DNS Resolver\n  version: 2022-08-28\n  description: Query DNS records from Google's closest server\nservers:\n  - url: https://dns.google\n  - url: https://8.8.8.8\npaths:\n  /resolve:\n    get:\n      parameters:\n      - in: query\n        name: name\n        schema:\n          type: string\n        required: true\n      - in: query\n        name: type\n        schema:\n          type: string\n        required: false\n      - in: query\n        name: cd\n        schema:\n          type: string\n        required: false\n      - in: query\n        name: ct\n        schema:\n          type: string\n        required: false\n      - in: query\n        name: do\n        schema:\n          type: string\n        required: false\n      - in: query\n        name: edns_client_subnet\n        schema:\n          type: string\n        required: false\n      - in: query\n        name: random_padding\n        schema:\n          type: string\n        required: false\n      responses:\n        default:\n          $ref: '#/components/responses/DnsResponse'\ncomponents:\n  responses:\n    DnsResponse:\n      description: A DNS response.\n      content:\n        application/x-javascript:\n          schema:\n            $ref: '#/components/schemas/DnsJsonResponse'\n  schemas:\n    DnsJsonResponse:\n      required:\n      - Status\n      - TC\n      - RD\n      - RA\n      - AD\n      - CD\n      - Question\n      properties:\n        Status:\n          description: Standard DNS response code (32 bit integer)\n          type: integer\n        TC:\n          description: Whether the response is truncated\n          type: boolean\n        RD:\n          description: Always true for Google Public DNS\n          type: boolean\n        RA:\n          description: Always true for Google Public DNS\n          type: boolean\n        AD:\n          description: Whether all response data was validated with DNSSEC\n          type: boolean\n        CD:\n          description: Whether the client asked to disable DNSSEC\n          type: boolean\n        Question:\n          type: array\n          items:\n            type: object\n            required:\n            - name\n            - type\n            properties:\n              name:\n                description: FQDN with trailing dot\n                type: string\n              type:\n                description: Standard DNS RR type\n                type: integer\n        Answer:\n          type: array\n          items:\n            type: object\n            required:\n            - name\n            - type\n            - data\n            properties:\n              name:\n                description: Always matches name in the Question section\n                type: string\n              type:\n                description: Standard DNS RR type\n                type: integer\n              TTL:\n                description: Record's time-to-live in seconds\n                type: integer\n              data:\n                description: Data for A - IP address as text\n                type: string\n        Authority:\n          type: array\n          items:\n            type: object\n            required:\n            - name\n            - type\n            - data\n            properties:\n              name:\n                description: Always matches name in the Question section\n                type: string\n              type:\n                description: Standard DNS RR type\n                type: integer\n              TTL:\n                description: Record's time-to-live in seconds\n                type: integer\n              data:\n                description: Data for A - IP address as text\n                type: string\n        Comment:\n          description: Any diagnostic information\n          type: string\n        edns_client_subnet:\n          description: IP address / scope prefix-length\n          type: string\n"}},
];
