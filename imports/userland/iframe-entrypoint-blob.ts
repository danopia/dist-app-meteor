export const iframeEntrypoint = atob('Y29uc3Qgb3JpZ2luYWxGZXRjaCA9IGdsb2JhbFRoaXMuZmV0Y2g7CmNvbnN0IGZldGNoUHJvdG9jb2xzID0gbmV3IE1hcCgpOwpnbG9iYWxUaGlzLmZldGNoID0gYXN5bmMgKHJlcSwgb3B0cykgPT4gewogICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEgaW5zdGFuY2VvZiBSZXF1ZXN0ID8gcmVxLnVybCA6IHJlcS50b1N0cmluZygpKTsKICAgIGNvbnNvbGUuZGVidWcoJ2ZldGNoIHRvJywgdXJsLnByb3RvY29sKTsKICAgIGNvbnN0IGhhbmRsZXIgPSBmZXRjaFByb3RvY29scy5nZXQodXJsLnByb3RvY29sKSB8fCBvcmlnaW5hbEZldGNoOwogICAgcmV0dXJuIGF3YWl0IGhhbmRsZXIocmVxLCBvcHRzKTsKfTsKLy9AdHMtaWdub3JlCmdsb2JhbFRoaXMuRGlzdEFwcCA9IGNsYXNzIERpc3RBcHAgewogICAgY29uc3RydWN0b3IocG9ydCkgewogICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7CiAgICAgICAgdGhpcy5uZXh0UHJvbWlzZSA9IDA7CiAgICAgICAgdGhpcy5wcm9taXNlcyA9IG5ldyBNYXAoKTsKICAgICAgICAvLyBIb29rIHVwIHNvbWUgaGFuZGxlcnM6CiAgICAgICAgcG9ydC5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgZXZ0ID0+IHRoaXMKICAgICAgICAgICAgLmhhbmRsZU1lc3NhZ2UoZXZ0KSk7CiAgICAgICAgcG9ydC5zdGFydCgpOwogICAgICAgIGZldGNoUHJvdG9jb2xzLnNldCgnZGlzdC1hcHA6JywgKGlucHV0LCBpbml0KSA9PiB0aGlzCiAgICAgICAgICAgIC5mZXRjaChpbnB1dCwgaW5pdCkpOwogICAgfQogICAgc3RhdGljIGFzeW5jIGNvbm5lY3QoKSB7CiAgICAgICAgY29uc3QgcG9ydCA9IGF3YWl0IHJlY2VpdmVNZXNzYWdlUG9ydCgpOwogICAgICAgIHJldHVybiBuZXcgRGlzdEFwcChwb3J0KTsKICAgIH0KICAgIGhhbmRsZU1lc3NhZ2UoZXZ0KSB7CiAgICAgICAgaWYgKGV2dC5kYXRhLnJwYyA9PSAncmVzcG9uZCcpIHsKICAgICAgICAgICAgY29uc3QgcGFpciA9IHRoaXMucHJvbWlzZXMuZ2V0KGV2dC5kYXRhLm9yaWdJZCk7CiAgICAgICAgICAgIGlmIChwYWlyKSB7CiAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzLmRlbGV0ZShldnQuZGF0YS5vcmlnSWQpOwogICAgICAgICAgICAgICAgaWYgKGV2dC5kYXRhLmVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgcGFpclsxXShuZXcgRXJyb3IoZXZ0LmRhdGEuZXJyb3IpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHBhaXJbMF0oZXZ0LmRhdGEuZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc29sZS53YXJuKCdUT0RPOiBEaXN0QXBwIHJlY2VpdmVkOicsIGV2dC5kYXRhKTsKICAgIH0KICAgIGFzeW5jIGZldGNoKHJlcSwgb3B0cykgewogICAgICAgIGlmICh0eXBlb2YgcmVxID09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZUZldGNoKHsKICAgICAgICAgICAgICAgIG1ldGhvZDogb3B0cz8ubWV0aG9kIHx8ICdHRVQnLAogICAgICAgICAgICAgICAgdXJsOiByZXEsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyhvcHRzPy5oZWFkZXJzKSwKICAgICAgICAgICAgICAgIGJvZHk6IChvcHRzPy5ib2R5ICE9IG51bGwpID8gYXdhaXQgbmV3IFJlc3BvbnNlKG9wdHMuYm9keSkudGV4dCgpIDogbnVsbCwKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXEsIG9wdHMpOwogICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZUZldGNoKHsKICAgICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCwKICAgICAgICAgICAgdXJsOiByZXF1ZXN0LnVybCwKICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzLAogICAgICAgICAgICBib2R5OiBhd2FpdCByZXF1ZXN0LnRleHQoKSB8fCBudWxsLAogICAgICAgIH0pOwogICAgfQogICAgYXN5bmMgaGFuZGxlRmV0Y2gocmVxdWVzdCkgewogICAgICAgIGNvbnN0IHBheWxvYWQgPSB7CiAgICAgICAgICAgIHVybDogcmVxdWVzdC51cmwsCiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsCiAgICAgICAgICAgIGhlYWRlcnM6IEFycmF5LmZyb20ocmVxdWVzdC5oZWFkZXJzKSwKICAgICAgICAgICAgYm9keTogcmVxdWVzdC5ib2R5ID8/IHVuZGVmaW5lZCwKICAgICAgICB9OwogICAgICAgIGNvbnN0IHJlc3BQYXlsb2FkID0gYXdhaXQgdGhpcy5zZW5kUnBjRm9yUmVzdWx0KHsKICAgICAgICAgICAgcnBjOiAnZmV0Y2gnLAogICAgICAgICAgICBzcGVjOiBwYXlsb2FkLAogICAgICAgIH0pOwogICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UocmVzcFBheWxvYWQuYm9keSwgewogICAgICAgICAgICBzdGF0dXM6IHJlc3BQYXlsb2FkLnN0YXR1cywKICAgICAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMocmVzcFBheWxvYWQuaGVhZGVycyA/PyBbXSksCiAgICAgICAgfSk7CiAgICB9CiAgICB1c2VWdWVTdGF0ZShrZXksIGluaXRpYWwpIHsKICAgICAgICBjb25zb2xlLmxvZygiVE9ETzogdXNlVnVlU3RhdGUiLCBrZXksIGluaXRpYWwpOwogICAgICAgIHJldHVybiBpbml0aWFsOwogICAgfQogICAgcmVwb3J0UmVhZHkoKSB7CiAgICAgICAgdGhpcy5wb3J0LnBvc3RNZXNzYWdlKHsgcnBjOiAncmVwb3J0UmVhZHknIH0pOwogICAgfQogICAgc2VuZFJwYyhkYXRhKSB7CiAgICAgICAgdGhpcy5wb3J0LnBvc3RNZXNzYWdlKGRhdGEpOwogICAgfQogICAgc2VuZFJwY0ZvclJlc3VsdChkYXRhKSB7CiAgICAgICAgY29uc3QgcHJvbWlzZU51bSA9IHRoaXMubmV4dFByb21pc2UrKzsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKG9rLCBmYWlsKSA9PiB7CiAgICAgICAgICAgIHRoaXMuc2VuZFJwYyh7IC4uLmRhdGEsIGlkOiBwcm9taXNlTnVtIH0pOwogICAgICAgICAgICB0aGlzLnByb21pc2VzLnNldChwcm9taXNlTnVtLCBbCiAgICAgICAgICAgICAgICB2YWx1ZSA9PiBvayh2YWx1ZSksCiAgICAgICAgICAgICAgICBlcnJvciA9PiBmYWlsKGVycm9yKSwKICAgICAgICAgICAgXSk7CiAgICAgICAgfSk7CiAgICAgICAgLy8gZGlzdC1hcHA6L3Byb3RvY29sZW5kcG9pbnRzL2h0dHAvaW52b2tlCiAgICB9Cn07CmZ1bmN0aW9uIHJlY2VpdmVNZXNzYWdlUG9ydCgpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIHJlamVjdCkgPT4gewogICAgICAgIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGV2ZW50KSB7CiAgICAgICAgICAgIGlmIChldmVudC5vcmlnaW4gIT09ICJ7T1JJR0lOfSIpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQuZGF0YSAhPT0gJ29iamVjdCcgfHwgIWV2ZW50LmRhdGEpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQuZGF0YS5wcm90b2NvbCAhPT0gJ3N0cmluZycpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgaGFuZGxlRXZlbnQpOwogICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsICgpID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlJlY2VpdmVkIGEgc2Vjb25kIHByb3RvY29sIGluaXRpYXRpb24/PyBSZWxvYWRpbmciKTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucG9ydHM/Lm1hcChwb3J0ID0+IHBvcnQucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgICAgICBycGM6ICdyZWN5Y2xlLWZyYW1lJywKICAgICAgICAgICAgICAgICAgICB9KSkgPz8gW107CiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcnQpCiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoIlJlY2VpdmVkIHByb3RvY29sIHBhY2tldCB3aXRob3V0IGEgcG9ydCIpKTsKICAgICAgICAgICAgICAgICAgICBvayhwb3J0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgZmFsc2UpOwogICAgICAgICAgICBpZiAoZXZlbnQuZGF0YS5wcm90b2NvbCAhPT0gJ3Byb3RvY29sLmRpc3QuYXBwL3YxYWxwaGExJykKICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoIlJlY2VpdmVkIHVuZXhwZWN0ZWQgcHJvdG9jb2wgIiArIGV2ZW50LmRhdGEucHJvdG9jb2wpKTsKICAgICAgICAgICAgY29uc3QgW3BvcnRdID0gZXZlbnQucG9ydHMgPz8gW107CiAgICAgICAgICAgIGlmICghcG9ydCkKICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoIlJlY2VpdmVkIHByb3RvY29sIHBhY2tldCB3aXRob3V0IGEgcG9ydCIpKTsKICAgICAgICAgICAgb2socG9ydCk7CiAgICAgICAgfQogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgaGFuZGxlRXZlbnQsIGZhbHNlKTsKICAgIH0pOwp9Cg==');
