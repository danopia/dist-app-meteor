import { Meteor } from 'meteor/meteor';
export const iframeEntrypointText = atob(`
ZnVuY3Rpb24gX2RlZmluZV9wcm9wZXJ0eShvYmosa2V5LHZhbHVlKXtpZihrZXkgaW4gb2JqKXtPYmplY3QuZGVmaW5lUHJvcGVy
dHkob2JqLGtleSx7dmFsdWU6dmFsdWUsZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOnRydWV9KX1l
bHNle29ialtrZXldPXZhbHVlfXJldHVybiBvYmp9Y29uc3Qgb3JpZ2luYWxGZXRjaD1nbG9iYWxUaGlzLmZldGNoO2NvbnN0IGZl
dGNoUHJvdG9jb2xzPW5ldyBNYXA7Z2xvYmFsVGhpcy5mZXRjaD1hc3luYyhyZXEsb3B0cyk9Pntjb25zdCB1cmw9bmV3IFVSTChy
ZXEgaW5zdGFuY2VvZiBSZXF1ZXN0P3JlcS51cmw6cmVxLnRvU3RyaW5nKCkpO2NvbnNvbGUuZGVidWcoImZldGNoIHRvIix1cmwu
cHJvdG9jb2wpO2NvbnN0IGhhbmRsZXI9ZmV0Y2hQcm90b2NvbHMuZ2V0KHVybC5wcm90b2NvbCl8fG9yaWdpbmFsRmV0Y2g7cmV0
dXJuIGF3YWl0IGhhbmRsZXIocmVxLG9wdHMpfTtjb25zdCBTZXNzaW9uSWQ9Y3J5cHRvLnJhbmRvbVVVSUQoKTtjbGFzcyBEaXN0
QXBwe3N0YXRpYyBhc3luYyBjb25uZWN0KCl7Y29uc3QgcG9ydD1hd2FpdCByZWNlaXZlTWVzc2FnZVBvcnQoKTtyZXR1cm4gbmV3
IERpc3RBcHAocG9ydCl9aGFuZGxlTWVzc2FnZShldnQpe2NvbnN0IGVudGl0eT1ldnQuZGF0YTtpZighKCJvcmlnSWQiaW4gZW50
aXR5KXx8dHlwZW9mIGVudGl0eS5vcmlnSWQhPT0ibnVtYmVyIil7Y29uc29sZS53YXJuKCJEaXN0QXBwIGdvdCBtZXNzYWdlIHdp
dGhvdXQgb3JpZ0lkIixlbnRpdHkpO3JldHVybn1jb25zdCB3cml0ZXI9dGhpcy5zdHJlYW1Xcml0ZXJzLmdldChlbnRpdHkub3Jp
Z0lkKTtpZih3cml0ZXIpe2lmKGVudGl0eS5raW5kPT0iU3RyZWFtRW5kIil7aWYoZW50aXR5LnN0YXR1cy5zdWNjZXNzKXt3cml0
ZXIuY2xvc2UoKX1lbHNle3dyaXRlci5hYm9ydChuZXcgRXJyb3IoYFN0cmVhbUVuZDogJHtlbnRpdHkuc3RhdHVzLmVycm9yTWVz
c2FnZT8/Ik5vIG1lc3NhZ2UgZ2l2ZW4uIn1gKSl9dGhpcy5zdHJlYW1Xcml0ZXJzLmRlbGV0ZShlbnRpdHkub3JpZ0lkKX1lbHNl
e3dyaXRlci53cml0ZShlbnRpdHkpfXJldHVybn1pZihlbnRpdHkua2luZD09IlN0cmVhbVN0YXJ0Iil7Y29uc3QgcGFpcj10aGlz
LnByb21pc2VzLmdldChlbnRpdHkub3JpZ0lkKTtpZihwYWlyKXtjb25zdCBzdHJlYW09bmV3IFRyYW5zZm9ybVN0cmVhbTt0aGlz
LnByb21pc2VzLmRlbGV0ZShlbnRpdHkub3JpZ0lkKTt0aGlzLnN0cmVhbVdyaXRlcnMuc2V0KGVudGl0eS5vcmlnSWQsc3RyZWFt
LndyaXRhYmxlLmdldFdyaXRlcigpKTtwYWlyWzBdKHN0cmVhbS5yZWFkYWJsZSk7cmV0dXJufX1pZihlbnRpdHkua2luZD09IkZl
dGNoUmVzcG9uc2UiKXtjb25zdCBwYWlyPXRoaXMucHJvbWlzZXMuZ2V0KGVudGl0eS5vcmlnSWQpO2lmKHBhaXIpe3RoaXMucHJv
bWlzZXMuZGVsZXRlKGVudGl0eS5vcmlnSWQpO3BhaXJbMF0oZW50aXR5KTtyZXR1cm59fWlmKGVudGl0eS5raW5kPT0iRmV0Y2hF
cnJvciIpe2NvbnN0IHBhaXI9dGhpcy5wcm9taXNlcy5nZXQoZW50aXR5Lm9yaWdJZCk7aWYocGFpcil7dGhpcy5wcm9taXNlcy5k
ZWxldGUoZW50aXR5Lm9yaWdJZCk7cGFpclsxXShuZXcgRXJyb3IoZW50aXR5LnNwZWMubWVzc2FnZSkpO3JldHVybn19Y29uc29s
ZS53YXJuKCJUT0RPOiBEaXN0QXBwIHJlY2VpdmVkOiIsZXZ0LmRhdGEpfWFzeW5jIGhhbmRsZUVycm9yKGVycil7YXdhaXQgdGhp
cy5mZXRjaCgiL3N5c3RlbS1hcGkvdGVsZW1ldHJ5LnYxYWxwaGExLmRpc3QuYXBwL290bHAiLHttZXRob2Q6IlBPU1QiLGJvZHk6
SlNPTi5zdHJpbmdpZnkoeyJyZXNvdXJjZUxvZ3MiOlt7InJlc291cmNlIjp7ImF0dHJpYnV0ZXMiOlt7ImtleSI6InNlcnZpY2Uu
bmFtZSIsInZhbHVlIjp7InN0cmluZ1ZhbHVlIjoiZGlzdC5hcHAtdXNlcmxhbmQifX0seyJrZXkiOiJzZXNzaW9uLmlkIiwidmFs
dWUiOnsic3RyaW5nVmFsdWUiOlNlc3Npb25JZH19XX0sInNjb3BlTG9ncyI6W3sic2NvcGUiOnt9LCJsb2dSZWNvcmRzIjpbeyJ0
aW1lVW5peE5hbm8iOmAke0RhdGUubm93KCl9MDAwMDAwYCwic2V2ZXJpdHlOdW1iZXIiOjksInNldmVyaXR5VGV4dCI6IkluZm8i
LCJuYW1lIjoiVW5jYXVnaHRFcnJvciIsImJvZHkiOnsic3RyaW5nVmFsdWUiOmBVbmNhdWdodCAke2Vyci5uYW1lfSBpbiBwYWdl
YCwiYXR0cmlidXRlcyI6W3sia2V5IjoiZXJyb3IubWVzc2FnZSIsInZhbHVlIjp7InN0cmluZ1ZhbHVlIjplcnIubWVzc2FnZX19
LHsia2V5IjoiZXJyb3IubmFtZSIsInZhbHVlIjp7InN0cmluZ1ZhbHVlIjplcnIubmFtZX19LHsia2V5IjoiZXJyb3Iuc3RhY2si
LCJ2YWx1ZSI6eyJzdHJpbmdWYWx1ZSI6ZXJyLnN0YWNrfX1dfX1dfV19XX0pfSl9YXN5bmMgbW91bnRBcGlCaW5kaW5nKGFwaUJp
bmRpbmdOYW1lKXtjb25zdCB0b2tlblJlc3A9YXdhaXQgdGhpcy5mZXRjaChgL0FwaUJpbmRpbmcvJHthcGlCaW5kaW5nTmFtZX0v
bW91bnRgLHttZXRob2Q6IlBPU1QifSk7aWYodG9rZW5SZXNwLnN0YXR1cz09NDAzKXJldHVybiBudWxsO2lmKCF0b2tlblJlc3Au
b2spdGhyb3cgbmV3IEVycm9yKGBBcGlCaW5kaW5nIE1vdW50IG9mICR7SlNPTi5zdHJpbmdpZnkoYXBpQmluZGluZ05hbWUpfSBu
b3QgT0sgYCtgKEhUVFAgJHt0b2tlblJlc3Auc3RhdHVzfSkKCmArYFVwc3RyZWFtIHJlc3BvbnNlIGJvZHk6CiR7YXdhaXQgdG9r
ZW5SZXNwLnRleHQoKX1gKTtjb25zdCB0b2tlbj1hd2FpdCB0b2tlblJlc3AudGV4dCgpO2NvbnNvbGUubG9nKHt0b2tlbn0pO3Jl
dHVybiB0b2tlbn1hc3luYyBmZXRjaChyZXEsb3B0cyxiYWdnYWdlKXtpZih0eXBlb2YgcmVxPT0ic3RyaW5nIil7cmV0dXJuIGF3
YWl0IHRoaXMuaGFuZGxlRmV0Y2goe21ldGhvZDpvcHRzPy5tZXRob2R8fCJHRVQiLHVybDpyZXEsaGVhZGVyczpuZXcgSGVhZGVy
cyhvcHRzPy5oZWFkZXJzKSxib2R5Om9wdHM/LmJvZHkhPW51bGw/YXdhaXQgbmV3IFJlc3BvbnNlKG9wdHMuYm9keSkudGV4dCgp
Om51bGwsYmFnZ2FnZX0pfWNvbnN0IHJlcXVlc3Q9bmV3IFJlcXVlc3QocmVxLG9wdHMpO3JldHVybiBhd2FpdCB0aGlzLmhhbmRs
ZUZldGNoKHttZXRob2Q6cmVxdWVzdC5tZXRob2QsdXJsOnJlcXVlc3QudXJsLGhlYWRlcnM6cmVxdWVzdC5oZWFkZXJzLGJvZHk6
YXdhaXQgcmVxdWVzdC50ZXh0KCl8fG51bGwsYmFnZ2FnZX0pfWFzeW5jIGhhbmRsZUZldGNoKHJlcXVlc3Qpe2NvbnN0IHJlc3BQ
YXlsb2FkPWF3YWl0IHRoaXMuc2VuZFJwY0ZvclJlc3VsdCh7a2luZDoiRmV0Y2hSZXF1ZXN0IixpZDotMSxiYWdnYWdlOnJlcXVl
c3QuYmFnZ2FnZSxzcGVjOnt1cmw6cmVxdWVzdC51cmwsbWV0aG9kOnJlcXVlc3QubWV0aG9kLGhlYWRlcnM6QXJyYXkuZnJvbShy
ZXF1ZXN0LmhlYWRlcnMpLGJvZHk6cmVxdWVzdC5ib2R5Pz91bmRlZmluZWR9fSk7aWYocmVzcFBheWxvYWQgaW5zdGFuY2VvZiBS
ZWFkYWJsZVN0cmVhbSl7Y29uc3QgcmVzcFJlYWRlcj1yZXNwUGF5bG9hZC5nZXRSZWFkZXIoKTtjb25zdCByZXNwPWF3YWl0IHJl
c3BSZWFkZXIucmVhZCgpO3Jlc3BSZWFkZXIucmVsZWFzZUxvY2soKTtpZighcmVzcC52YWx1ZXx8cmVzcC52YWx1ZS5raW5kIT09
IkZldGNoUmVzcG9uc2UiKXt0aHJvdyBuZXcgRXJyb3IoYEJVRzogd2VpcmQgZmV0Y2ggc3RyZWFtYCl9cmV0dXJuIG5ldyBSZXNw
b25zZShyZXNwUGF5bG9hZC5waXBlVGhyb3VnaChuZXcgVHJhbnNmb3JtU3RyZWFtKHt0cmFuc2Zvcm0oY2h1bmssY3Rscil7aWYo
Y2h1bmsua2luZCE9PSJGZXRjaEJvZHlDaHVuayIpdGhyb3cgbmV3IEVycm9yKGBCVUc6IHdlaXJkIGZldGNoIGJvZHkgY2h1bmtg
KTtjdGxyLmVucXVldWUoY2h1bmsuc3BlYy5jaHVuayl9fSkpLHtzdGF0dXM6cmVzcC52YWx1ZS5zcGVjLnN0YXR1cyxoZWFkZXJz
Om5ldyBIZWFkZXJzKHJlc3AudmFsdWUuc3BlYy5oZWFkZXJzPz9bXSl9KX1lbHNle2lmKHJlc3BQYXlsb2FkLnNwZWMuYm9keVN0
cmVhbSE9bnVsbCl0aHJvdyBuZXcgRXJyb3IoYFRPRE86IHN0cmVhbWApO3JldHVybiBuZXcgUmVzcG9uc2UocmVzcFBheWxvYWQu
c3BlYy5ib2R5fHxudWxsLHtzdGF0dXM6cmVzcFBheWxvYWQuc3BlYy5zdGF0dXMsaGVhZGVyczpuZXcgSGVhZGVycyhyZXNwUGF5
bG9hZC5zcGVjLmhlYWRlcnM/P1tdKX0pfX11c2VWdWVTdGF0ZShrZXksaW5pdGlhbCl7Y29uc29sZS5sb2coIlRPRE86IHVzZVZ1
ZVN0YXRlIixrZXksaW5pdGlhbCk7cmV0dXJuIGluaXRpYWx9cmVwb3J0UmVhZHkoKXt0aGlzLnNlbmRScGMoe2tpbmQ6IkxpZmVj
eWNsZSIsc3BlYzp7c3RhZ2U6InJlYWR5In19KX1sYXVuY2hJbnRlbnQoaW50ZW50KXt0aGlzLnNlbmRScGMoe2tpbmQ6IkxhdW5j
aEludGVudCIsc3BlYzppbnRlbnR9KX1zZW5kUnBjKGRhdGEpe3RoaXMucG9ydC5wb3N0TWVzc2FnZShkYXRhKX1zZW5kUnBjRm9y
UmVzdWx0KGRhdGEpe2NvbnN0IHByb21pc2VOdW09dGhpcy5uZXh0UHJvbWlzZSsrO3JldHVybiBuZXcgUHJvbWlzZSgob2ssZmFp
bCk9Pnt0aGlzLnNlbmRScGMoey4uLmRhdGEsaWQ6cHJvbWlzZU51bX0pO3RoaXMucHJvbWlzZXMuc2V0KHByb21pc2VOdW0sW3Zh
bHVlPT5vayh2YWx1ZSksZXJyb3I9PmZhaWwoZXJyb3IpXSl9KX1jb25zdHJ1Y3Rvcihwb3J0KXtfZGVmaW5lX3Byb3BlcnR5KHRo
aXMsInBvcnQiLHZvaWQgMCk7X2RlZmluZV9wcm9wZXJ0eSh0aGlzLCJuZXh0UHJvbWlzZSIsdm9pZCAwKTtfZGVmaW5lX3Byb3Bl
cnR5KHRoaXMsInByb21pc2VzIix2b2lkIDApO19kZWZpbmVfcHJvcGVydHkodGhpcywic3RyZWFtV3JpdGVycyIsdm9pZCAwKTt0
aGlzLnBvcnQ9cG9ydDt0aGlzLm5leHRQcm9taXNlPTA7dGhpcy5wcm9taXNlcz1uZXcgTWFwO3RoaXMuc3RyZWFtV3JpdGVycz1u
ZXcgTWFwO3BvcnQuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsZXZ0PT50aGlzLmhhbmRsZU1lc3NhZ2UoZXZ0KSk7cG9ydC5z
dGFydCgpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJlcnJvciIsZXZ0PT50aGlzLmhhbmRsZUVycm9yKGV2dC5lcnJvcikuY2F0
Y2goZXJyPT5jb25zb2xlLmVycm9yKGVycikpKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigidW5oYW5kbGVkcmVqZWN0aW9uIixl
dnQ9PnRoaXMuaGFuZGxlRXJyb3IoZXZ0LnJlYXNvbikuY2F0Y2goZXJyPT5jb25zb2xlLmVycm9yKGVycikpKTtmZXRjaFByb3Rv
Y29scy5zZXQoImRpc3QtYXBwOiIsKGlucHV0LGluaXQpPT50aGlzLmZldGNoKGlucHV0LGluaXQpKX19Z2xvYmFsVGhpcy5EaXN0
QXBwPURpc3RBcHA7YXN5bmMgZnVuY3Rpb24gcmVjZWl2ZU1lc3NhZ2VQb3J0KCl7Y29uc3R7cG9ydDEscG9ydDJ9PW5ldyBNZXNz
YWdlQ2hhbm5lbDthd2FpdCBuZXcgUHJvbWlzZShvaz0+e2lmKGRvY3VtZW50LnJlYWR5U3RhdGU9PT0iY29tcGxldGUiKXtvaygp
fWVsc2V7Z2xvYmFsVGhpcy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwoKT0+b2soKSk7Y29uc29sZS5sb2coImFwcCB3YWl0ZWQg
Zm9yIGxvYWQgZXZlbnQiKX19KTt3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHtwcm90b2NvbDoicHJvdG9jb2wuZGlzdC5hcHAv
djFhbHBoYTIifSwiKiIsW3BvcnQyXSk7cmV0dXJuIHBvcnQxfWNsYXNzIEFwaUJpbmRpbmdNb3VudHthc3luYyBmZXRjaChyZXEs
b3B0cyl7Y29uc3QgYXBpUGF0aD1yZXEuc3RhcnRzV2l0aCgiLyIpP3JlcS5zbGljZSgxKTooKCk9Pntjb25zdCB1cmw9bmV3IFVS
TChyZXEpO3JldHVybiB1cmwucGF0aG5hbWUuc2xpY2UoMSkrdXJsLnNlYXJjaCt1cmwuaGFzaH0pKCk7cmV0dXJuIGF3YWl0IHRo
aXMuZGlzdEFwcC5mZXRjaChgL2NhcC8ke3RoaXMudG9rZW59LyR7YXBpUGF0aH1gLHsuLi5vcHRzfSl9Y29uc3RydWN0b3IoZGlz
dEFwcCxhcGlCaW5kaW5nTmFtZSx0b2tlbil7X2RlZmluZV9wcm9wZXJ0eSh0aGlzLCJkaXN0QXBwIix2b2lkIDApO19kZWZpbmVf
cHJvcGVydHkodGhpcywiYXBpQmluZGluZ05hbWUiLHZvaWQgMCk7X2RlZmluZV9wcm9wZXJ0eSh0aGlzLCJ0b2tlbiIsdm9pZCAw
KTt0aGlzLmRpc3RBcHA9ZGlzdEFwcDt0aGlzLmFwaUJpbmRpbmdOYW1lPWFwaUJpbmRpbmdOYW1lO3RoaXMudG9rZW49dG9rZW59
fWdsb2JhbFRoaXMuQXBpQmluZGluZ01vdW50PUFwaUJpbmRpbmdNb3VudDtleHBvcnR7fTsK
`);
export const iframeEntrypointBlob = new Blob([
  iframeEntrypointText.replace('{ORIGIN}', new URL(Meteor.absoluteUrl()).origin),
], {type: 'text/javascript'});
export const iframeEntrypointUrl = URL.createObjectURL(iframeEntrypointBlob);
