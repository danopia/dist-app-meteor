export const iframeEntrypoint = atob('Y29uc3Qgb3JpZ2luYWxGZXRjaCA9IGdsb2JhbFRoaXMuZmV0Y2g7CmNvbnN0IGZldGNoUHJvdG9jb2xzID0gbmV3IE1hcCgpOwpnbG9iYWxUaGlzLmZldGNoID0gYXN5bmMgKHJlcSwgb3B0cykgPT4gewogICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEgaW5zdGFuY2VvZiBSZXF1ZXN0ID8gcmVxLnVybCA6IHJlcS50b1N0cmluZygpKTsKICAgIGNvbnNvbGUuZGVidWcoJ2ZldGNoIHRvJywgdXJsLnByb3RvY29sKTsKICAgIGNvbnN0IGhhbmRsZXIgPSBmZXRjaFByb3RvY29scy5nZXQodXJsLnByb3RvY29sKSB8fCBvcmlnaW5hbEZldGNoOwogICAgcmV0dXJuIGF3YWl0IGhhbmRsZXIocmVxLCBvcHRzKTsKfTsKZ2xvYmFsVGhpcy5EaXN0QXBwID0gY2xhc3MgRGlzdEFwcCB7CiAgICBjb25zdHJ1Y3Rvcihwb3J0KSB7CiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDsKICAgICAgICB0aGlzLm5leHRQcm9taXNlID0gMDsKICAgICAgICB0aGlzLnByb21pc2VzID0gbmV3IE1hcCgpOwogICAgICAgIC8vIEhvb2sgdXAgc29tZSBoYW5kbGVyczoKICAgICAgICBwb3J0LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBldnQgPT4gdGhpcwogICAgICAgICAgICAuaGFuZGxlTWVzc2FnZShldnQpKTsKICAgICAgICBwb3J0LnN0YXJ0KCk7CiAgICAgICAgZmV0Y2hQcm90b2NvbHMuc2V0KCdkaXN0LWFwcDonLCAoaW5wdXQsIGluaXQpID0+IHRoaXMKICAgICAgICAgICAgLmZldGNoKGlucHV0LCBpbml0KSk7CiAgICB9CiAgICBzdGF0aWMgYXN5bmMgY29ubmVjdCgpIHsKICAgICAgICBjb25zdCBwb3J0ID0gYXdhaXQgcmVjZWl2ZU1lc3NhZ2VQb3J0KCk7CiAgICAgICAgcmV0dXJuIG5ldyBEaXN0QXBwKHBvcnQpOwogICAgfQogICAgaGFuZGxlTWVzc2FnZShldnQpIHsKICAgICAgICBpZiAoZXZ0LmRhdGEucnBjID09ICdyZXNwb25kJykgewogICAgICAgICAgICBjb25zdCBwYWlyID0gdGhpcy5wcm9taXNlcy5nZXQoZXZ0LmRhdGEub3JpZ0lkKTsKICAgICAgICAgICAgaWYgKHBhaXIpIHsKICAgICAgICAgICAgICAgIHRoaXMucHJvbWlzZXMuZGVsZXRlKGV2dC5kYXRhLm9yaWdJZCk7CiAgICAgICAgICAgICAgICBpZiAoZXZ0LmRhdGEuZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICBwYWlyWzFdKG5ldyBFcnJvcihldnQuZGF0YS5lcnJvcikpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcGFpclswXShldnQuZGF0YS5kYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zb2xlLndhcm4oJ1RPRE86IERpc3RBcHAgcmVjZWl2ZWQ6JywgZXZ0LmRhdGEpOwogICAgfQogICAgYXN5bmMgZmV0Y2gocmVxLCBvcHRzKSB7CiAgICAgICAgaWYgKHR5cGVvZiByZXEgPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlRmV0Y2goewogICAgICAgICAgICAgICAgbWV0aG9kOiBvcHRzPy5tZXRob2QgfHwgJ0dFVCcsCiAgICAgICAgICAgICAgICB1cmw6IHJlcSwKICAgICAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKG9wdHM/LmhlYWRlcnMpLAogICAgICAgICAgICAgICAgYm9keTogKG9wdHM/LmJvZHkgIT0gbnVsbCkgPyBhd2FpdCBuZXcgUmVzcG9uc2Uob3B0cy5ib2R5KS50ZXh0KCkgOiBudWxsLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcSwgb3B0cyk7CiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlRmV0Y2goewogICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLAogICAgICAgICAgICB1cmw6IHJlcXVlc3QudXJsLAogICAgICAgICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsCiAgICAgICAgICAgIGJvZHk6IGF3YWl0IHJlcXVlc3QudGV4dCgpIHx8IG51bGwsCiAgICAgICAgfSk7CiAgICB9CiAgICBhc3luYyBoYW5kbGVGZXRjaChyZXF1ZXN0KSB7CiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHsKICAgICAgICAgICAgdXJsOiByZXF1ZXN0LnVybCwKICAgICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCwKICAgICAgICAgICAgaGVhZGVyczogQXJyYXkuZnJvbShyZXF1ZXN0LmhlYWRlcnMpLAogICAgICAgICAgICBib2R5OiByZXF1ZXN0LmJvZHkgPz8gdW5kZWZpbmVkLAogICAgICAgIH07CiAgICAgICAgY29uc3QgcmVzcFBheWxvYWQgPSBhd2FpdCB0aGlzLnNlbmRScGNGb3JSZXN1bHQoewogICAgICAgICAgICBycGM6ICdmZXRjaCcsCiAgICAgICAgICAgIHNwZWM6IHBheWxvYWQsCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShyZXNwUGF5bG9hZC5ib2R5LCB7CiAgICAgICAgICAgIHN0YXR1czogcmVzcFBheWxvYWQuc3RhdHVzLAogICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyhyZXNwUGF5bG9hZC5oZWFkZXJzID8/IFtdKSwKICAgICAgICB9KTsKICAgIH0KICAgIHVzZVZ1ZVN0YXRlKGtleSwgaW5pdGlhbCkgewogICAgICAgIGNvbnNvbGUubG9nKCJUT0RPOiB1c2VWdWVTdGF0ZSIsIGtleSwgaW5pdGlhbCk7CiAgICAgICAgcmV0dXJuIGluaXRpYWw7CiAgICB9CiAgICByZXBvcnRSZWFkeSgpIHsKICAgICAgICB0aGlzLnBvcnQucG9zdE1lc3NhZ2UoeyBycGM6ICdyZXBvcnRSZWFkeScgfSk7CiAgICB9CiAgICBzZW5kUnBjKGRhdGEpIHsKICAgICAgICB0aGlzLnBvcnQucG9zdE1lc3NhZ2UoZGF0YSk7CiAgICB9CiAgICBzZW5kUnBjRm9yUmVzdWx0KGRhdGEpIHsKICAgICAgICBjb25zdCBwcm9taXNlTnVtID0gdGhpcy5uZXh0UHJvbWlzZSsrOwogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIGZhaWwpID0+IHsKICAgICAgICAgICAgdGhpcy5zZW5kUnBjKHsgLi4uZGF0YSwgaWQ6IHByb21pc2VOdW0gfSk7CiAgICAgICAgICAgIHRoaXMucHJvbWlzZXMuc2V0KHByb21pc2VOdW0sIFsKICAgICAgICAgICAgICAgIHZhbHVlID0+IG9rKHZhbHVlKSwKICAgICAgICAgICAgICAgIGVycm9yID0+IGZhaWwoZXJyb3IpLAogICAgICAgICAgICBdKTsKICAgICAgICB9KTsKICAgICAgICAvLyBkaXN0LWFwcDovcHJvdG9jb2xlbmRwb2ludHMvaHR0cC9pbnZva2UKICAgIH0KfTsKZnVuY3Rpb24gcmVjZWl2ZU1lc3NhZ2VQb3J0KCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKChvaywgcmVqZWN0KSA9PiB7CiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZXZlbnQpIHsKICAgICAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbiAhPT0gIntPUklHSU59IikKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5kYXRhICE9PSAnb2JqZWN0JyB8fCAhZXZlbnQuZGF0YSkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5kYXRhLnByb3RvY29sICE9PSAnc3RyaW5nJykKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBoYW5kbGVFdmVudCk7CiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgKCkgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiUmVjZWl2ZWQgYSBzZWNvbmQgcHJvdG9jb2wgaW5pdGlhdGlvbj8/IFJlbG9hZGluZyIpOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBldmVudC5wb3J0cz8ubWFwKHBvcnQgPT4gcG9ydC5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHJwYzogJ3JlY3ljbGUtZnJhbWUnLAogICAgICAgICAgICAgICAgICAgIH0pKSA/PyBbXTsKICAgICAgICAgICAgICAgICAgICBpZiAocG9ydCkKICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigiUmVjZWl2ZWQgcHJvdG9jb2wgcGFja2V0IHdpdGhvdXQgYSBwb3J0IikpOwogICAgICAgICAgICAgICAgICAgIG9rKHBvcnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBmYWxzZSk7CiAgICAgICAgICAgIGlmIChldmVudC5kYXRhLnByb3RvY29sICE9PSAncHJvdG9jb2wuZGlzdC5hcHAvdjFhbHBoYTEnKQogICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigiUmVjZWl2ZWQgdW5leHBlY3RlZCBwcm90b2NvbCAiICsgZXZlbnQuZGF0YS5wcm90b2NvbCkpOwogICAgICAgICAgICBjb25zdCBbcG9ydF0gPSBldmVudC5wb3J0cyA/PyBbXTsKICAgICAgICAgICAgaWYgKCFwb3J0KQogICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigiUmVjZWl2ZWQgcHJvdG9jb2wgcGFja2V0IHdpdGhvdXQgYSBwb3J0IikpOwogICAgICAgICAgICBvayhwb3J0KTsKICAgICAgICB9CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBoYW5kbGVFdmVudCwgZmFsc2UpOwogICAgfSk7Cn0K');
